<wdkModel>

  <paramSet name="clinicalVisitParams">
    
    <enumParam name="type"
               prompt="type"
               multiPick="false"
               quote="true"
               visible="false">
      <help>this is internal</help>
      <enumList>
        <enumValue default="true">
          <term>clinicalVisit</term>
          <internal>clinicalVisit</internal>
        </enumValue>
      </enumList>
    </enumParam>

        <datasetParam name="clinical_visits_by_sourceid" 
		  recordClassRef="ParticipantRecordClasses.ParticipantRecordClass"
		  prompt="Source ID input set">
      <help><![CDATA[Input a set of source IDs, or upload a file<br><br>

             It can be delimited by a comma, semi colon or any white space.<br><br>
             Its possible that not all the IDs in the list will be found in the database
             due to anumber of reasons such as unavailable ID mapping. It is currenly not
             possible to inform which IDs did not match anything in the database]]> </help>
     <suggest default="100118844" />
      
    </datasetParam>

    <filterParamNew name="visits_nf" 
                    metadataQueryRef="ClinicalVisitVQ.VisitMetaData"
                    ontologyQueryRef="ClinicalVisitVQ.VisitOntology"
                    backgroundQueryRef="ClinicalVisitVQ.VisitMetaDataBkgd"
                    prompt="Clincial Visits"
                    trimMetadataTerms="false"
                    dependedParamRef="participantParams.dataset,clinicalVisitParams.visits_visitage_metadata_nf,clinicalVisitParams.visit_date,participantParams.duration_observation,clinicalVisitParams.dwellings_nf,clinicalVisitParams.geographic_region,clinicalVisitParams.participants_nf">
      <help>
        Select visits based on their visit characteristics. 
      </help>
    </filterParamNew>

     <filterParamNew name="relative_visits_nf" 
                    metadataQueryRef="ClinicalVisitVQ.RelVisitMetaData"
                    ontologyQueryRef="ClinicalVisitVQ.RelVisitOntology"
                    prompt="Relative Visits"
                    trimMetadataTerms="false"
                    dependedParamRef="participantParams.dataset">
      <help>
        Select relative visits based on their visit characteristics. 
      </help>
    </filterParamNew>

       <filterParamNew name="visits_visitage_metadata_nf" 
                      metadataQueryRef="ClinicalVisitVQ.ClinicalVisitAgeMetadataNf"
                      ontologyQueryRef="ClinicalVisitVQ.ClinicalVisitAgeOntologyNf"
                      backgroundQueryRef="ClinicalVisitVQ.ClinicalVisitAgeMetadataBkgdNf"
                      prompt="Age at visit"
                      dependedParamRef="participantParams.dataset,clinicalVisitParams.geographic_region,clinicalVisitParams.visit_date,participantParams.duration_observation"
                      trimMetadataTerms="false">
         <help>
              Select the age of the participants at the time of their clinical visits.
         </help>
       </filterParamNew>

       <filterParamNew name="geographic_region" 
                       metadataQueryRef="ClinicalVisitVQ.RegionMetaData"
                       summaryMetadataQueryRef="ClinicalVisitVQ.RegionMetaDataSummary"
                       ontologyQueryRef="DwellingVQ.RegionOntology"
                       useSummaryMetadataQueryForInternalValue="true"
                       prompt="Participant"
                      dependedParamRef="participantParams.dataset"
                       trimMetadataTerms="false">
         <help>
           Select visits based on the participants subcounty where they live. 
         </help>
    </filterParamNew>

       <filterParamNew name="dwellings_nf" 
                      metadataQueryRef="ClinicalVisitVQ.DwellingMetaData"
                      summaryMetadataQueryRef="ClinicalVisitVQ.DwellingMetaDataSummary"
                      ontologyQueryRef="ClinicalVisitVQ.DwellingOntology"
                      backgroundQueryRef="ClinicalVisitVQ.DwellingMetaDataBkgd"
                      useSummaryMetadataQueryForInternalValue="true"
                      prompt="Households"
                      dependedParamRef="participantParams.dataset,clinicalVisitParams.visits_visitage_metadata_nf,clinicalVisitParams.visit_date,participantParams.duration_observation,clinicalVisitParams.geographic_region,clinicalVisitParams.participants_nf"
                      trimMetadataTerms="false">
         <help>
              Select visits based on the household characteristics where the participants live. 
         </help>
       </filterParamNew>

       <filterParamNew name="participants_nf" 
                      metadataQueryRef="ClinicalVisitVQ.ParticipantMetaData"
                      summaryMetadataQueryRef="ClinicalVisitVQ.ParticipantMetaDataSummary"
                      ontologyQueryRef="ClinicalVisitVQ.ParticipantOntology"
                      backgroundQueryRef="ClinicalVisitVQ.ParticipantMetaDataBkgd"
                      useSummaryMetadataQueryForInternalValue="true"
                      prompt="Participants"
                      trimMetadataTerms="false"
                      dependedParamRef="participantParams.dataset,clinicalVisitParams.visits_visitage_metadata_nf,clinicalVisitParams.visit_date,participantParams.duration_observation,clinicalVisitParams.geographic_region">
         <help>
              Select participants based on their characteristics. 
         </help>
       </filterParamNew>

       <dateRangeParam name="visit_date"
                       prompt="Choose start and end dates "
                       minDate="2011-08-01"
                       maxDate="2016-06-30">
         <help>"select the earliest and latest dates to include for identifying visits and computing mosquito counts."</help>
<!--         <suggest default="{'min': '2011-08-05', 'max': '2016-06-30'}" />  -->

       </dateRangeParam>

        

<!--  NOTE: this is development yet to be done so commenting out for now 
       <flatVocabParam name="min_age_at_visit"
               prompt="Age at visit &gt;= "
               multiPick="false"
               quote="false"
               visible="false"
               dependedParamRef="clinicalVisitParams.visits_visitage_metadata_nf,clinicalVisitParams.geographic_region"
               queryRef="ClinicalVisitVQ.minAgeAtVisit">
      <help>Minimum age at visit.</help>
    </flatVocabParam>

    <flatVocabParam name="max_age_at_visit"
               prompt="Age at visit &lt;= "
               multiPick="false"
               quote="false"
               visible="false"
               dependedParamRef="clinicalVisitParams.visits_visitage_metadata_nf,clinicalVisitParams.geographic_region"
               queryRef="ClinicalVisitVQ.maxAgeAtVisit">
      <help>Minimum age at visit.</help>
    </flatVocabParam>
-->

   <stringParam name="maxDaysBetween"
		 prompt="Max days between visits &lt;= "
		 number="true">
      <help>Specify the maximum number of days between visit to keep or remove and the following visit.</help>
      <suggest default="10"/>
      <regex>\d\d*</regex>
    </stringParam>

     <stringParam name="minDaysBetween"
		 prompt="Min days between visits &gt;= "
		 number="true">
      <help>Specify the minimum number of days between visit to keep or remove and the following visit.</help>
      <suggest default="1"/>
      <regex>\d\d*</regex>
    </stringParam>

    <numberRangeParam name="days_between"
                       prompt="Days between visits: "
                       integer="true"
                       min="0"
                       max="1000">
         <help>Set the range of days between visits to compare to visits selected in the previous step</help>
         <suggest default="{'min': '1', 'max': '10'}" />  

       </numberRangeParam> 

   <stringParam name="minAgeAtVisit"
		 prompt="Age at visit &gt;= "
		 number="true">
      <help>Minimum age at time of visit.</help>
      <suggest default="0.5"/>
      <regex>\d\d*\.*\d*</regex>
    </stringParam>

   <stringParam name="maxAgeAtVisit"
		 prompt="Age at visit &lt;= "
		 number="true">
      <help>Maximum age at time of visit.</help>
      <suggest default="80"/>
      <regex>\d\d*\.*\d*</regex>
    </stringParam>

    <enumParam name="dateOperator"
               prompt="Keep or Remove visits "
               multiPick="false"
               quote="false"
               visible="true">
      <help>Choose how to compare these two visits.  Do you want to remove visits that have another visit within the specified time frame or keep them.</help>
      <enumList>
        <enumValue default="true">
          <term>remove</term>
          <internal>MINUS</internal>
        </enumValue>
        <enumValue>
          <term>keep</term>
          <internal>INTERSECT</internal>
        </enumValue>
      </enumList>
    </enumParam>

    <enumParam name="date_direction"
               prompt="Choose a direction "
               multiPick="false"
               quote="false"
               visible="true">
      <help>Choose a direction for the corresponding visit.  Will the matching visit be before or after relative to the first visit.</help>
      <enumList>
        <enumValue default="true">
          <term>after</term>
          <internal><![CDATA[>=]]></internal>
        </enumValue>
        <enumValue>
          <term>before</term>
          <internal><![CDATA[<=]]></internal>
        </enumValue>
      </enumList>
    </enumParam>

    <flatVocabParam name="use_relative_visits"
               prompt="Use relative visits"
               multiPick="false"
               quote="false"
               visible="true"
               queryRef="ClinicalVisitVQ.useRelativeVisits">
      <help>You MUST change this parameter to Yes in order to use relative visits! If you decide to not use relative visits, set this parameter to No and make certain "Keep or remove visits" is set to remove.</help>
    </flatVocabParam>


    <flatVocabParam name="dateOperator_fv"
               prompt="Keep or Remove visits "
               multiPick="false"
               quote="false"
               visible="true"
               dependedParamRef="clinicalVisitParams.use_relative_visits"
               queryRef="ClinicalVisitVQ.dateOperator">
      <help>Choose how to compare these two visits.  Do you want to remove visits that have another visit within the specified time frame or keep them.</help>
    </flatVocabParam>

    <flatVocabParam name="date_direction_fv"
               prompt="Choose a direction "
               multiPick="false"
               quote="false"
               visible="true"
               queryRef="ClinicalVisitVQ.dateDirection">
      <help>Choose a direction for the corresponding visit.  Will the matching visit be before or after relative to the first visit.</help>
    </flatVocabParam>

    <answerParam name="clinical_visit_result"
                  prompt="Input Result Set"
                  readonly="true"
                  visible="false">
       <recordClass ref="ClinicalVisitRecordClasses.ClinicalVisitRecordClass" />
    </answerParam>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!--  MAL-ED specific .. should be injected -->  
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <filterParamNew name="relative_visits_nf_maled" 
                    metadataQueryRef="ClinicalVisitVQ.RelVisitMetaData_maled"
                    ontologyQueryRef="ClinicalVisitVQ.RelVisitOntology_maled"
                    prompt="Relative Visits"
                    trimMetadataTerms="false" >
      <help>
        Select relative visits based on their visit characteristics. 
      </help>
    </filterParamNew>

  </paramSet>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!--  Vocab queries-->  
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

 <querySet name="ClinicalVisitVQ" queryType="vocab" isCacheable="true">

        <sqlQuery name="dateDirection">
            <column name="internal" />
            <column name="term" />
            <sql>
              <![CDATA[
                       SELECT 'after' as term, '>=' as internal from dual
                       UNION
                       SELECT 'before' as term, '<=' as internal from dual
              ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="dateOperator">
          <paramRef ref="clinicalVisitParams.use_relative_visits" />  
          <column name="internal" />
          <column name="term" />
          <sql>
            <![CDATA[
                     SELECT * from (
                     SELECT 'remove' as term, 'MINUS' as internal from dual
                     UNION
                     SELECT 'keep' as term, 'INTERSECT' as internal from dual
                     where $$use_relative_visits$$ = 1  )
                     ORDER by term desc
            ]]>
            </sql>
        </sqlQuery>


        <sqlQuery name="useRelativeVisits">
            <column name="internal" />
            <column name="term" />
            <sql>
            <![CDATA[
                     SELECT 'No' as term, 0 as internal from dual
                     UNION
                     SELECT 'Yes' as term, 1 as internal from dual
            ]]>
            </sql>
        </sqlQuery>

<!--
                <sqlQuery name="minAgeAtVisit">
            <paramRef ref="clinicalVisitParams.visits_visitage_metadata_nf" />
            <paramRef ref="clinicalVisitParams.geographic_region" />
            <column name="internal" />
            <column name="term" />
            <sql>
            <![CDATA[
select min(EUPATH_0000113) as term, min(EUPATH_0000113) as internal 
   from apidbtuning.clinicalvisitattributes 
   where protocol_app_node_id in ($$visits_visitage_metadata_nf$$)
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="maxAgeAtVisit">
            <paramRef ref="clinicalVisitParams.visits_visitage_metadata_nf" />
            <paramRef ref="clinicalVisitParams.geographic_region" />
            <column name="internal" />
            <column name="term" />
            <sql>
            <![CDATA[
select max(EUPATH_0000113) as term, max(EUPATH_0000113) as internal 
   from apidbtuning.clinicalvisitattributes 
   where protocol_app_node_id in ($$visits_visitage_metadata_nf$$)
            ]]>
            </sql>
        </sqlQuery>
-->

   <sqlQuery name="ClinicalVisitAgeOntologyNf">
      <paramRef ref="clinicalVisitParams.geographic_region" /> 
      <paramRef ref="clinicalVisitParams.visit_date" /> 
      <paramRef ref="participantParams.duration_observation" />  
      <paramRef ref="participantParams.dataset" />  
      <column name="ontology_term_name"/>
      <column name="parent_ontology_term_name"/>
      <column name="display_name"/>
      <column name="description"/>
      <column name="type"/>
      <column name="units"/>
      <column name="precision"/>
      <column name="is_range"/>
      <sql>
        <![CDATA[
                       select o.ontology_term_name, 'dummy' as parent_ontology_term_name, o.display_name, o.description, o.units,o.type,o.is_range,o.precision
from apidbtuning.metadataontology o
where ontology_term_name = 'Age at time of visit'
union
                 select 'dummy' as ontology_term_name, null as parent_ontology_term_name, 'Dwelling' as display_name, null as description, null as units, 'string' as type, 0 as is_range,
                 null as precision from dual
    ]]>   
        </sql>
      </sqlQuery>
          
   <sqlQuery name="ClinicalVisitAgeMetadataNf">
      <paramRef ref="clinicalVisitParams.geographic_region" /> 
      <paramRef ref="clinicalVisitParams.visit_date" /> 
      <paramRef ref="participantParams.duration_observation" />  
      <paramRef ref="participantParams.dataset" />  
      <column name="ontology_term_name"/>
      <column name="internal"/>
      <column name="number_value"/>
      <column name="date_value"/>
      <column name="string_value"/>
      <sql>
        <![CDATA[
select distinct cva.protocol_app_node_id as internal, m.property as ontology_term_name, '1' as string_value, cva.EUPATH_0000113 as number_value, cast(null as date) as date_value
 from apidbtuning.participantattributes pa, apidbtuning.protocolappnodeio io, apidbtuning.clinicalvisitattributes cva, apidbtuning.metadatatype m
 where cva.protocol_app_node_id in ($$geographic_region$$)
 and cva.EUPATH_0000091 >= $$visit_date.min$$
 and cva.EUPATH_0000091 <= $$visit_date.max$$
 and io.output_node_id = cva.protocol_app_node_id
 and pa.protocol_app_node_id = io.input_node_id
 and m.source_id = 'EUPATH_0000113'
 AND least(pa.EUPATH_0000152, $$visit_date.max$$) - 
 greatest(pa.EUPATH_0000151, $$visit_date.min$$) + 1 >= $$duration_observation$$
         ]]>   
      </sql>
   </sqlQuery>

      <sqlQuery name="ClinicalVisitAgeMetadataBkgdNf" >
      <paramRef ref="clinicalVisitParams.geographic_region" /> 
      <paramRef ref="clinicalVisitParams.visit_date" /> 
      <paramRef ref="participantParams.duration_observation" />  
      <paramRef ref="participantParams.dataset" />  
      <column name="ontology_term_name"/>
      <column name="internal"/>
      <column name="number_value"/>
      <column name="date_value"/>
      <column name="string_value"/>
      <sql>
        <![CDATA[
select distinct cva.protocol_app_node_id as internal, m.property as ontology_term_name, '1' as string_value, cva.EUPATH_0000113 as number_value, cast(null as date) as date_value
 from apidbtuning.participantattributes pa, apidbtuning.protocolappnodeio io, apidbtuning.clinicalvisitattributes cva, apidbtuning.metadatatype m
 where io.output_node_id = cva.protocol_app_node_id
 and pa.protocol_app_node_id = io.input_node_id
 and m.source_id = 'EUPATH_0000113'
          ]]>   
      </sql>
      </sqlQuery>

    <sqlQuery name="RegionMetaDataSummary" >
      <paramRef ref="participantParams.dataset" />  
      <column name="ontology_term_name"/>
      <column name="internal"/>
      <column name="number_value"/>
      <column name="date_value"/>
      <column name="string_value"/>
      <sql>
        <![CDATA[
select cva.protocol_app_node_id as internal, mt.property as ontology_term_name, da.EUPATH_0000054 as string_value,
cast(null as number) as number_value, cast(null as date) as date_value
from apidbtuning.dwellingattributes da,apidbtuning.protocolappnodeio ioa, apidbtuning.protocolappnodeio iob,
apidbtuning.clinicalvisitattributes cva,apidbtuning.metadatatype mt
where da.protocol_app_node_id = ioa.input_node_id
and ioa.output_node_id = iob.input_node_id
and iob.output_node_id = cva.protocol_app_node_id
and mt.source_id = 'EUPATH_0000054'
        ]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="RegionMetaData" >
      <paramRef ref="participantParams.dataset" />  
      <column name="ontology_term_name"/>
      <column name="internal"/>
      <column name="number_value"/>
      <column name="date_value"/>
      <column name="string_value"/>
      <sql>
        <![CDATA[
select distinct ioa.output_node_id as internal, mt.property as ontology_term_name, da.EUPATH_0000054 as string_value,
cast(null as number) as number_value, cast(null as date) as date_value
from apidbtuning.dwellingattributes da,apidbtuning.protocolappnodeio ioa, apidbtuning.protocolappnodeio iob,
apidbtuning.clinicalvisitattributes cva,apidbtuning.metadatatype mt
where da.protocol_app_node_id = ioa.input_node_id
and ioa.output_node_id = iob.input_node_id
and iob.output_node_id = cva.protocol_app_node_id
and mt.source_id = 'EUPATH_0000054'
        ]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="DwellingOntology">
      <paramRef ref="clinicalVisitParams.visits_visitage_metadata_nf" />
      <paramRef ref="clinicalVisitParams.visit_date" /> 
      <paramRef ref="participantParams.duration_observation" />  
      <paramRef ref="clinicalVisitParams.geographic_region" />  
      <paramRef ref="clinicalVisitParams.participants_nf" />  
      <paramRef ref="participantParams.dataset" />  
      <column name="ontology_term_name"/>
      <column name="parent_ontology_term_name"/>
      <column name="display_name"/>
      <column name="description"/>
      <column name="type"/>
      <column name="units"/>
      <column name="precision"/>
      <column name="is_range"/>
      <sql>
        <![CDATA[
   with leaf as (
 select o.ontology_term_name, CASE WHEN o.parent_ontology_term_name = 'Thing' THEN null ELSE o.parent_ontology_term_name END as parent_ontology_term_name, nvl(o.display_name,o.ontology_term_name) as display_name, o.description, o.units,o.type,o.is_range,o.precision
from apidbtuning.metadataontology o, 
(select distinct term
 from apidbtuning.metadata
 where dataset_name = $$dataset$$
 and category = 'Dwelling type'
 and source_id != 'EUPATH_0000094') md
 where o.ontology_term_name = md.term),
first as (
 select o.ontology_term_name, CASE WHEN o.parent_ontology_term_name = 'Thing' THEN null ELSE o.parent_ontology_term_name END as parent_ontology_term_name, nvl(o.display_name,o.ontology_term_name) as display_name, o.description, o.units,o.type,o.is_range,o.precision
 from apidbtuning.metadataontology o, (select distinct parent_ontology_term_name from leaf where parent_ontology_term_name is not null) par
 where o.ontology_term_name = par.parent_ontology_term_name),
 second as (
 select o.ontology_term_name, CASE WHEN o.parent_ontology_term_name = 'Thing' THEN null ELSE o.parent_ontology_term_name END as parent_ontology_term_name, nvl(o.display_name,o.ontology_term_name) as display_name, o.description, o.units,o.type,o.is_range,o.precision
 from apidbtuning.metadataontology o, (select distinct parent_ontology_term_name from first where parent_ontology_term_name is not null) gpar
 where o.ontology_term_name = gpar.parent_ontology_term_name)
 select * from leaf
 union
 select * from first
 union
 select * from second
 union
 select o.ontology_term_name, CASE WHEN o.parent_ontology_term_name = 'Thing' THEN null ELSE o.parent_ontology_term_name END as parent_ontology_term_name, nvl(o.display_name,o.ontology_term_name) as display_name, o.description, o.units,o.type,o.is_range,o.precision
 from apidbtuning.metadataontology o, (select distinct parent_ontology_term_name from second where parent_ontology_term_name is not null) ggpar
 where o.ontology_term_name = ggpar.parent_ontology_term_name
 union
 select 'average anopheles' as ontology_term_name, null as parent_ontology_term_name, 'Average Anopheles Collected' as display_name, 'Average number of Anopheles collected in monthly CDC light traps during the dates of this search' as description, null as units, 'number' as type, 1 as is_range,
 null as precision from dual
      ]]>
      </sql>
      </sqlQuery>

  <sqlQuery name="DwellingMetaDataSummary" >
        <paramRef ref="clinicalVisitParams.visits_visitage_metadata_nf" />
        <paramRef ref="clinicalVisitParams.visit_date" /> 
        <paramRef ref="participantParams.duration_observation" />  
        <paramRef ref="clinicalVisitParams.geographic_region" />  
        <paramRef ref="clinicalVisitParams.participants_nf" />  
        <paramRef ref="participantParams.dataset" />  
        <column name="ontology_term_name"/>
        <column name="internal"/>
        <column name="number_value"/>
        <column name="date_value"/>
        <column name="string_value"/>
        <sql>
        <![CDATA[
with part as ( select distinct dw.protocol_app_node_id as dwelling_id, pa.protocol_app_node_id as part_id, iov.output_node_id as visit_id
  from apidbtuning.participantattributes pa, apidbtuning.protocolappnodeio io, apidbtuning.protocolappnodeio iov, apidbtuning.dwellingattributes dw
   where iov.output_node_id in ($$participants_nf$$)
       and pa.protocol_app_node_id = iov.input_node_id
       and pa.protocol_app_node_id = io.output_node_id
       and io.input_node_id = dw.protocol_app_node_id)
 select distinct Part.visit_id as internal, m.term as ontology_term_name, m.string_value, m.number_value, m.date_value
 from apidbtuning.metadata m, part
 where m.dataset_name = $$dataset$$
 and m.category = 'Dwelling type'
 and part.dwelling_id = m.protocol_app_node_id
 union
 select part.visit_id as internal, 'average anopheles' as ontology_term_name, null as string_value, nvl(mos.avg_anoph,0) as number_value, null as date_value
 from (select da.protocol_app_node_id, round(avg(nvl(EUPATH_0000192,0)+nvl(EUPATH_0000193,0)+nvl(EUPATH_0000204,0)+nvl(EUPATH_0000205,0)),1) as avg_anoph
  from apidbtuning.dwellingattributes da, apidbtuning.protocolappnodeio io, apidbtuning.lighttrapattributes la
  where da.protocol_app_node_id = io.input_node_id
  and la.protocol_app_node_id = io.output_node_id
  and la.OBI_0001619 >= $$visit_date.min$$ 
  and la.OBI_0001619 <= $$visit_date.max$$ 
  group by da.protocol_app_node_id) mos, part
  where part.dwelling_id = mos.protocol_app_node_id(+)
          ]]>
    </sql>    

    </sqlQuery>

    <sqlQuery name="DwellingMetaData" >
      <paramRef ref="clinicalVisitParams.visits_visitage_metadata_nf" />
      <paramRef ref="clinicalVisitParams.visit_date" /> 
      <paramRef ref="participantParams.duration_observation" />  
      <paramRef ref="clinicalVisitParams.geographic_region" />  
      <paramRef ref="clinicalVisitParams.participants_nf" />  
      <paramRef ref="participantParams.dataset" />  
      <column name="ontology_term_name"/>
      <column name="internal"/>
      <column name="number_value"/>
      <column name="date_value"/>
      <column name="string_value"/>
      <sql>
         <![CDATA[
with part as ( select distinct dw.protocol_app_node_id as dwelling_id, pa.protocol_app_node_id as part_id
  from apidbtuning.participantattributes pa, apidbtuning.protocolappnodeio io, apidbtuning.protocolappnodeio iov, apidbtuning.dwellingattributes dw
   where iov.output_node_id in ($$participants_nf$$)
       and pa.protocol_app_node_id = iov.input_node_id
       and pa.protocol_app_node_id = io.output_node_id
       and io.input_node_id = dw.protocol_app_node_id)
 select distinct Part.dwelling_id as internal, m.term as ontology_term_name, m.string_value, m.number_value, m.date_value
 from apidbtuning.metadata m, part
 where m.dataset_name = $$dataset$$
 and m.category = 'Dwelling type'
 and part.dwelling_id = m.protocol_app_node_id
 union
 select distinct part.dwelling_id as internal, 'average anopheles' as ontology_term_name, null as string_value, nvl(mos.avg_anoph,0) as number_value, null as date_value
 from (select da.protocol_app_node_id, round(avg(nvl(EUPATH_0000192,0)+nvl(EUPATH_0000193,0)+nvl(EUPATH_0000204,0)+nvl(EUPATH_0000205,0)),1) as avg_anoph
  from apidbtuning.dwellingattributes da, apidbtuning.protocolappnodeio io, apidbtuning.lighttrapattributes la
  where da.protocol_app_node_id = io.input_node_id
  and la.protocol_app_node_id = io.output_node_id
  and la.OBI_0001619 >= $$visit_date.min$$ 
  and la.OBI_0001619 <= $$visit_date.max$$ 
  group by da.protocol_app_node_id) mos, part
  where part.dwelling_id = mos.protocol_app_node_id(+)
          ]]>
    </sql>    

    </sqlQuery>

    <sqlQuery name="DwellingMetaDataBkgd">
      <paramRef ref="clinicalVisitParams.visits_visitage_metadata_nf" />
      <paramRef ref="clinicalVisitParams.visit_date" /> 
      <paramRef ref="participantParams.duration_observation" />  
      <paramRef ref="clinicalVisitParams.geographic_region" />  
      <paramRef ref="clinicalVisitParams.participants_nf" />  
      <paramRef ref="participantParams.dataset" />  
      <column name="ontology_term_name"/>
      <column name="internal"/>
      <column name="number_value"/>
      <column name="date_value"/>
      <column name="string_value"/>
      <sql>
         <![CDATA[
with part as ( select distinct iod.input_node_id as dwelling_id,pa.protocol_app_node_id as part_id
  from (select min(EUPATH_0000113) as min_age, max(EUPATH_0000113) as max_age
   from apidbtuning.clinicalvisitattributes 
   ) age,
   apidbtuning.participantattributes pa, apidbtuning.protocolappnodeio iop, apidbtuning.protocolappnodeio iod
   where pa.protocol_app_node_id = iop.input_node_id
   and pa.protocol_app_node_id = iod.output_node_id
)
 select distinct Part.dwelling_id as internal, m.term as ontology_term_name, m.string_value, m.number_value, m.date_value
 from apidbtuning.metadata m, part
 where m.dataset_name = $$dataset$$
 and m.category = 'Dwelling type'
 and part.dwelling_id = m.protocol_app_node_id
 union
 select distinct part.dwelling_id as internal, 'average anopheles' as ontology_term_name, null as string_value, nvl(mos.avg_anoph,0) as number_value, null as date_value
 from (select da.protocol_app_node_id, round(avg(nvl(EUPATH_0000192,0)+nvl(EUPATH_0000193,0)+nvl(EUPATH_0000204,0)+nvl(EUPATH_0000205,0)),1) as avg_anoph
  from apidbtuning.dwellingattributes da, apidbtuning.protocolappnodeio io, apidbtuning.lighttrapattributes la
  where da.protocol_app_node_id = io.input_node_id
  and la.protocol_app_node_id = io.output_node_id
  group by da.protocol_app_node_id) mos, part
  where part.dwelling_id = mos.protocol_app_node_id(+)
          ]]>
    </sql>    

    </sqlQuery>

    <sqlQuery name="ParticipantOntology">
      <paramRef ref="clinicalVisitParams.visits_visitage_metadata_nf" />
      <paramRef ref="clinicalVisitParams.visit_date" /> 
      <paramRef ref="participantParams.duration_observation" />  
      <paramRef ref="clinicalVisitParams.geographic_region" />  
      <paramRef ref="participantParams.dataset" />  
      <column name="ontology_term_name"/>
      <column name="parent_ontology_term_name"/>
      <column name="display_name"/>
      <column name="description"/>
      <column name="type"/>
      <column name="units"/>
      <column name="precision"/>
      <column name="is_range"/>
      <sql>
         <![CDATA[
with leaf as ( 
 select o.ontology_term_name, CASE WHEN o.parent_ontology_term_name = 'Thing' THEN null ELSE o.parent_ontology_term_name END as parent_ontology_term_name, nvl(o.display_name,o.ontology_term_name) as display_name, o.description, o.units,o.type,o.is_range,o.precision
from apidbtuning.metadataontology o, 
(select distinct term
 from apidbtuning.metadata
 where dataset_name = $$dataset$$
 and category = 'Participant'
 and source_id != 'EUPATH_0000032') md
 where o.ontology_term_name = md.term),
first as (
 select o.ontology_term_name, CASE WHEN o.parent_ontology_term_name = 'Thing' THEN null ELSE o.parent_ontology_term_name END as parent_ontology_term_name, nvl(o.display_name,o.ontology_term_name) as display_name, o.description, o.units,o.type,o.is_range,o.precision
 from apidbtuning.metadataontology o, (select distinct parent_ontology_term_name from leaf where parent_ontology_term_name is not null) par
 where o.ontology_term_name = par.parent_ontology_term_name),
 second as (
 select o.ontology_term_name, CASE WHEN o.parent_ontology_term_name = 'Thing' THEN null ELSE o.parent_ontology_term_name END as parent_ontology_term_name, nvl(o.display_name,o.ontology_term_name) as display_name, o.description, o.units,o.type,o.is_range,o.precision
 from apidbtuning.metadataontology o, (select distinct parent_ontology_term_name from first where parent_ontology_term_name is not null) gpar
 where o.ontology_term_name = gpar.parent_ontology_term_name)
 select * from leaf
 union
 select * from first
 union
 select * from second
 union
 select o.ontology_term_name, CASE WHEN o.parent_ontology_term_name = 'Thing' THEN null ELSE o.parent_ontology_term_name END as parent_ontology_term_name, nvl(o.display_name,o.ontology_term_name) as display_name, o.description, o.units,o.type,o.is_range,o.precision
 from apidbtuning.metadataontology o, (select distinct parent_ontology_term_name from second where parent_ontology_term_name is not null) ggpar
 where o.ontology_term_name = ggpar.parent_ontology_term_name
         ]]>
    </sql>
   </sqlQuery>

   <sqlQuery name="ParticipantMetaDataSummary" >
     <paramRef ref="clinicalVisitParams.visits_visitage_metadata_nf" />
     <paramRef ref="clinicalVisitParams.visit_date" /> 
     <paramRef ref="participantParams.duration_observation" />  
     <paramRef ref="clinicalVisitParams.geographic_region" />  
     <paramRef ref="participantParams.dataset" />  
     <column name="ontology_term_name"/>
     <column name="internal"/>
     <column name="number_value"/>
     <column name="date_value"/>
     <column name="string_value"/>
     <sql>
         <![CDATA[
 select distinct io.output_node_id as internal, m.term as ontology_term_name, m.string_value, m.number_value, m.date_value
from (select min(EUPATH_0000113) as min_age, max(EUPATH_0000113) as max_age
   from apidbtuning.clinicalvisitattributes 
   where protocol_app_node_id in ($$visits_visitage_metadata_nf$$)
   ) age, apidbtuning.metadata m, apidbtuning.protocolappnodeio io, apidbtuning.participantattributes pa
where io.output_node_id in ($$geographic_region$$)
   and io.input_node_id = pa.protocol_app_node_id
   AND least(pa.EUPATH_0000152, $$visit_date.max$$, pa.EUPATH_0000032 + ( age.max_age * 365)) - 
       greatest(pa.EUPATH_0000151, $$visit_date.min$$, pa.EUPATH_0000032 + ( age.min_age * 365)) + 1 >= $$duration_observation$$
       and pa.protocol_app_node_id = io.input_node_id
       and io.output_node_id in ($$visits_visitage_metadata_nf$$)
       and pa.protocol_app_node_id = m.protocol_app_node_id
 and m.dataset_name = $$dataset$$
 and m.category = 'Participant'
          ]]>
    </sql>
    </sqlQuery>

    <sqlQuery name="ParticipantMetaData" >
      <paramRef ref="clinicalVisitParams.visits_visitage_metadata_nf" />
      <paramRef ref="clinicalVisitParams.visit_date" /> 
      <paramRef ref="participantParams.duration_observation" />  
      <paramRef ref="clinicalVisitParams.geographic_region" />  
      <paramRef ref="participantParams.dataset" />  
      <column name="ontology_term_name"/>
      <column name="internal"/>
      <column name="number_value"/>
      <column name="date_value"/>
      <column name="string_value"/>
      <sql>
         <![CDATA[
 select distinct pa.protocol_app_node_id as internal, m.term as ontology_term_name, m.string_value, m.number_value, m.date_value
from (select min(EUPATH_0000113) as min_age, max(EUPATH_0000113) as max_age
   from apidbtuning.clinicalvisitattributes 
   where protocol_app_node_id in ($$visits_visitage_metadata_nf$$)
   ) age, apidbtuning.metadata m, apidbtuning.protocolappnodeio io, apidbtuning.participantattributes pa
where io.output_node_id in ($$geographic_region$$)
   and io.input_node_id = pa.protocol_app_node_id
   AND least(pa.EUPATH_0000152, $$visit_date.max$$, pa.EUPATH_0000032 + ( age.max_age * 365)) - 
       greatest(pa.EUPATH_0000151, $$visit_date.min$$, pa.EUPATH_0000032 + ( age.min_age * 365)) + 1 >= $$duration_observation$$
       and pa.protocol_app_node_id = io.input_node_id
       and io.output_node_id in ($$visits_visitage_metadata_nf$$)
       and pa.protocol_app_node_id = m.protocol_app_node_id
 and m.dataset_name = $$dataset$$
 and m.category = 'Participant'
          ]]>
    </sql>
    </sqlQuery>
 
    <sqlQuery name="ParticipantMetaDataBkgd">
      <paramRef ref="clinicalVisitParams.visits_visitage_metadata_nf" />
      <paramRef ref="clinicalVisitParams.visit_date" /> 
      <paramRef ref="participantParams.duration_observation" />  
      <paramRef ref="clinicalVisitParams.geographic_region" />  
      <paramRef ref="participantParams.dataset" />  
      <column name="ontology_term_name"/>
      <column name="internal"/>
      <column name="number_value"/>
      <column name="date_value"/>
      <column name="string_value"/>
      <sql>
         <![CDATA[
select distinct m.protocol_app_node_id as internal, m.term as ontology_term_name, m.string_value, m.number_value, m.date_value
from apidbtuning.metadata m
 where m.dataset_name = $$dataset$$
 and m.category = 'Participant'
          ]]>
    </sql>
    </sqlQuery>


    <sqlQuery name="VisitOntology">
      <paramRef ref="clinicalVisitParams.visits_visitage_metadata_nf" />
      <paramRef ref="clinicalVisitParams.visit_date" /> 
      <paramRef ref="participantParams.duration_observation" />  
      <paramRef ref="clinicalVisitParams.dwellings_nf" />  
      <paramRef ref="clinicalVisitParams.geographic_region" />  
      <paramRef ref="clinicalVisitParams.participants_nf" />  
      <paramRef ref="participantParams.dataset" />  
      <column name="ontology_term_name"/>
      <column name="parent_ontology_term_name"/>
      <column name="display_name"/>
      <column name="description"/>
      <column name="type"/>
      <column name="units"/>
      <column name="precision"/>
      <column name="is_range"/>
      <sql>
         <![CDATA[
with leaf as ( select o.ontology_term_name, CASE WHEN o.parent_ontology_term_name = 'Thing' THEN null ELSE o.parent_ontology_term_name END as parent_ontology_term_name, nvl(o.display_name,o.ontology_term_name) as display_name, o.description, o.units,o.type,o.is_range,o.precision
from apidbtuning.metadataontology o, 
(select distinct term
 from apidbtuning.metadata
 where dataset_name = $$dataset$$
 and category in ('Visit','Specimen type')
 and source_id != 'EUPATH_0000094') md
 where o.ontology_term_name = md.term),
first as (
 select o.ontology_term_name, CASE WHEN o.parent_ontology_term_name = 'Thing' THEN null ELSE o.parent_ontology_term_name END as parent_ontology_term_name, nvl(o.display_name,o.ontology_term_name) as display_name, o.description, o.units,o.type,o.is_range,o.precision
 from apidbtuning.metadataontology o, (select distinct parent_ontology_term_name from leaf where parent_ontology_term_name is not null) par
 where o.ontology_term_name = par.parent_ontology_term_name),
 second as (
 select o.ontology_term_name, CASE WHEN o.parent_ontology_term_name = 'Thing' THEN null ELSE o.parent_ontology_term_name END as parent_ontology_term_name, nvl(o.display_name,o.ontology_term_name) as display_name, o.description, o.units,o.type,o.is_range,o.precision
 from apidbtuning.metadataontology o, (select distinct parent_ontology_term_name from first where parent_ontology_term_name is not null) gpar
 where o.ontology_term_name = gpar.parent_ontology_term_name)
 select * from leaf
 union
 select * from first
 union
 select * from second
 union
 select o.ontology_term_name, CASE WHEN o.parent_ontology_term_name = 'Thing' THEN null ELSE o.parent_ontology_term_name END as parent_ontology_term_name, nvl(o.display_name,o.ontology_term_name) as display_name, o.description, o.units,o.type,o.is_range,o.precision
 from apidbtuning.metadataontology o, (select distinct parent_ontology_term_name from second where parent_ontology_term_name is not null) ggpar
 where o.ontology_term_name = ggpar.parent_ontology_term_name
         ]]>
    </sql>
   </sqlQuery>

   <sqlQuery name="RelVisitOntology">
     <paramRef ref="participantParams.dataset" />  
     <column name="ontology_term_name"/>
     <column name="parent_ontology_term_name"/>
     <column name="display_name"/>
     <column name="description"/>
     <column name="type"/>
     <column name="units"/>
     <column name="precision"/>
     <column name="is_range"/>
    <sql>
         <![CDATA[
with leaf as ( select o.ontology_term_name, CASE WHEN o.parent_ontology_term_name = 'Thing' THEN null ELSE o.parent_ontology_term_name END as parent_ontology_term_name, nvl(o.display_name,o.ontology_term_name) as display_name, o.description, o.units,o.type,o.is_range,o.precision
from apidbtuning.metadataontology o, 
(select distinct term
 from apidbtuning.metadata
 where dataset_name = 'ISASimple_ICEMR_PRISM_surveillance_RSRC' --$$dataset$$
 and category in ('Visit','Specimen type')
 and source_id != 'EUPATH_0000094') md
 where o.ontology_term_name = md.term),
first as (
 select o.ontology_term_name, CASE WHEN o.parent_ontology_term_name = 'Thing' THEN null ELSE o.parent_ontology_term_name END as parent_ontology_term_name, nvl(o.display_name,o.ontology_term_name) as display_name, o.description, o.units,o.type,o.is_range,o.precision
 from apidbtuning.metadataontology o, (select distinct parent_ontology_term_name from leaf where parent_ontology_term_name is not null) par
 where o.ontology_term_name = par.parent_ontology_term_name),
 second as (
 select o.ontology_term_name, CASE WHEN o.parent_ontology_term_name = 'Thing' THEN null ELSE o.parent_ontology_term_name END as parent_ontology_term_name, nvl(o.display_name,o.ontology_term_name) as display_name, o.description, o.units,o.type,o.is_range,o.precision
 from apidbtuning.metadataontology o, (select distinct parent_ontology_term_name from first where parent_ontology_term_name is not null) gpar
 where o.ontology_term_name = gpar.parent_ontology_term_name)
 select * from leaf
 union
 select * from first
 union
 select * from second
 union
 select o.ontology_term_name, CASE WHEN o.parent_ontology_term_name = 'Thing' THEN null ELSE o.parent_ontology_term_name END as parent_ontology_term_name, nvl(o.display_name,o.ontology_term_name) as display_name, o.description, o.units,o.type,o.is_range,o.precision
 from apidbtuning.metadataontology o, (select distinct parent_ontology_term_name from second where parent_ontology_term_name is not null) ggpar
 where o.ontology_term_name = ggpar.parent_ontology_term_name
         ]]>
    </sql>
   </sqlQuery>

       <sqlQuery name="VisitMetaData" >
         <paramRef ref="clinicalVisitParams.visits_visitage_metadata_nf" />
         <paramRef ref="clinicalVisitParams.visit_date" /> 
         <paramRef ref="participantParams.duration_observation" />  
         <paramRef ref="clinicalVisitParams.dwellings_nf" />  
         <paramRef ref="clinicalVisitParams.geographic_region" />  
         <paramRef ref="clinicalVisitParams.participants_nf" />  
         <paramRef ref="participantParams.dataset" />  
         <column name="ontology_term_name"/>
         <column name="internal"/>
         <column name="number_value"/>
         <column name="date_value"/>
         <column name="string_value"/>
         <sql>
           <![CDATA[
select distinct m.protocol_app_node_id as internal, m.term as ontology_term_name, m.string_value, m.number_value, m.date_value
 from apidbtuning.metadata m
 where m.dataset_name = $$dataset$$
 and m.category = 'Visit'
 and m.protocol_app_node_id in ($$dwellings_nf$$)
 union
 select io.input_node_id as internal, m.term as ontology_term_name, m.string_value, m.number_value, m.date_value
from apidbtuning.metadata m, apidbtuning.protocolappnodeio io
where dataset_name = $$dataset$$
and m.category = 'Specimen type' 
and m.term = 'Specimen type'
and io.output_node_id = m.protocol_app_node_id
and io.input_node_id in ($$dwellings_nf$$)
          ]]>
    </sql>
    </sqlQuery>    

    

    <sqlQuery name="VisitMetaDataBkgd">
         <paramRef ref="clinicalVisitParams.visits_visitage_metadata_nf" />
         <paramRef ref="clinicalVisitParams.visit_date" /> 
         <paramRef ref="participantParams.duration_observation" />  
         <paramRef ref="clinicalVisitParams.dwellings_nf" />  
         <paramRef ref="clinicalVisitParams.geographic_region" />  
         <paramRef ref="clinicalVisitParams.participants_nf" />  
         <paramRef ref="participantParams.dataset" />  
         <column name="ontology_term_name"/>
         <column name="internal"/>
         <column name="number_value"/>
         <column name="date_value"/>
         <column name="string_value"/>
         <sql>
           <![CDATA[
 select distinct protocol_app_node_id as internal, term as ontology_term_name, string_value, number_value, date_value
 from apidbtuning.metadata 
 where dataset_name = $$dataset$$
 and category = 'Visit'
 union
 select io.input_node_id as internal, m.term as ontology_term_name, m.string_value, m.number_value, m.date_value
from apidbtuning.metadata m, apidbtuning.protocolappnodeio io
where dataset_name = $$dataset$$
and m.category = 'Specimen type' 
and m.term = 'Specimen type'
and io.output_node_id = m.protocol_app_node_id
          ]]>
    </sql>
    </sqlQuery>

    <sqlQuery name="RelVisitMetaData">
      <paramRef ref="participantParams.dataset" />  
      <column name="ontology_term_name"/>
      <column name="internal"/>
      <column name="number_value"/>
      <column name="date_value"/>
      <column name="string_value"/>
      <sql>
        <![CDATA[
                select distinct protocol_app_node_id as internal, term as ontology_term_name,
                       string_value, number_value, date_value
                from apidbtuning.metadata 
                where dataset_name = 'ISASimple_ICEMR_PRISM_surveillance_RSRC' --$$dataset$$
                  and category = 'Visit'
              union
                select io.input_node_id as internal, m.term as ontology_term_name,
                       m.string_value, m.number_value, m.date_value
                from apidbtuning.metadata m, apidbtuning.protocolappnodeio io
                where dataset_name = 'ISASimple_ICEMR_PRISM_surveillance_RSRC' --$$dataset$$
                  and m.category = 'Specimen type' 
                  and m.term = 'Specimen type'
                  and io.output_node_id = m.protocol_app_node_id
          ]]>
    </sql>
    </sqlQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!--  MAL-ED specific .. should be injected -->  
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="RelVisitOntology_maled">
     <column name="ontology_term_name"/>
     <column name="parent_ontology_term_name"/>
     <column name="display_name"/>
     <column name="description"/>
     <column name="type"/>
     <column name="units"/>
     <column name="precision"/>
     <column name="is_range"/>
    <sql>
         <![CDATA[
with leaf as ( select o.ontology_term_name, CASE WHEN o.parent_ontology_term_name = 'Thing' THEN null ELSE o.parent_ontology_term_name END as parent_ontology_term_name, nvl(o.display_name,o.ontology_term_name) as display_name, o.description, o.units,o.type,o.is_range,o.precision
from apidbtuning.metadataontology o, 
(select distinct term
 from apidbtuning.metadata
 where dataset_name = 'ISASimple_Gates_MAL-ED_stdm_tp_RSRC' --$$dataset$$
 and category = 'Event'
 and source_id != 'EUPATH_0000094') md
 where o.ontology_term_name = md.term),
first as (
 select o.ontology_term_name, CASE WHEN o.parent_ontology_term_name = 'Thing' THEN null ELSE o.parent_ontology_term_name END as parent_ontology_term_name, nvl(o.display_name,o.ontology_term_name) as display_name, o.description, o.units,o.type,o.is_range,o.precision
 from apidbtuning.metadataontology o, (select distinct parent_ontology_term_name from leaf where parent_ontology_term_name is not null) par
 where o.ontology_term_name = par.parent_ontology_term_name),
 second as (
 select o.ontology_term_name, CASE WHEN o.parent_ontology_term_name = 'Thing' THEN null ELSE o.parent_ontology_term_name END as parent_ontology_term_name, nvl(o.display_name,o.ontology_term_name) as display_name, o.description, o.units,o.type,o.is_range,o.precision
 from apidbtuning.metadataontology o, (select distinct parent_ontology_term_name from first where parent_ontology_term_name is not null) gpar
 where o.ontology_term_name = gpar.parent_ontology_term_name)
 select * from leaf
 union
 select * from first
 union
 select * from second
 union
 select o.ontology_term_name, CASE WHEN o.parent_ontology_term_name = 'Thing' THEN null ELSE o.parent_ontology_term_name END as parent_ontology_term_name, nvl(o.display_name,o.ontology_term_name) as display_name, o.description, o.units,o.type,o.is_range,o.precision
 from apidbtuning.metadataontology o, (select distinct parent_ontology_term_name from second where parent_ontology_term_name is not null) ggpar
 where o.ontology_term_name = ggpar.parent_ontology_term_name
         ]]>
    </sql>
   </sqlQuery>

   <sqlQuery name="RelVisitMetaData_maled">
      <column name="ontology_term_name"/>
      <column name="internal"/>
      <column name="number_value"/>
      <column name="date_value"/>
      <column name="string_value"/>
      <sql>
        <![CDATA[
                select distinct protocol_app_node_id as internal, term as ontology_term_name,
                       string_value, number_value, date_value
                from apidbtuning.metadata 
                where dataset_name = 'ISASimple_Gates_MAL-ED_stdm_tp_RSRC' --$$dataset$$
                and category = 'Event'
          ]]>
    </sql>
    </sqlQuery>
   
  </querySet>    

</wdkModel>

<wdkModel>

  <constant name="clinicalVisitIdTransformSql1">
    <![CDATA[
      select distinct io.output_node_id as internal
       from apidbtuning.protocolappnodeio io,
        (##FILTERED_IDS##) md
       where io.input_node_id = md.internal
       and io.output_type_source_id = 'EUPATH_0000738'
     ]]>   
   </constant>
   
   <constant name="clinicalVisitIdTransformSql2">
     <![CDATA[
       select internal from (##FILTERED_IDS##)
     ]]> 
   </constant>   

  <paramSet name="clinicalVisitParams">
    
    <enumParam name="type"
               prompt="type"
               multiPick="false"
               quote="true"
               visible="false">
      <help>this is internal</help>
      <enumList>
        <enumValue default="true">
          <term>clinicalVisit</term>
          <internal>clinicalVisit</internal>
        </enumValue>
      </enumList>
    </enumParam>

        <datasetParam name="clinical_visits_by_sourceid" 
		  recordClassRef="ParticipantRecordClasses.ParticipantRecordClass"
		  prompt="Source ID input set">
      <help><![CDATA[Input a set of source IDs, or upload a file<br><br>

             It can be delimited by a comma, semi colon or any white space.<br><br>
             Its possible that not all the IDs in the list will be found in the database
             due to anumber of reasons such as unavailable ID mapping. It is currenly not
             possible to inform which IDs did not match anything in the database]]> </help>
     <suggest default="100118844" />
      
    </datasetParam>

    <filterParamNew name="visits_nf" 
                    metadataQueryRef="ClinicalVisitVQ.VisitMetaData"
                    ontologyQueryRef="ClinicalVisitVQ.VisitOntology"
                    backgroundQueryRef="ClinicalVisitVQ.VisitMetaDataBkgd"
                    prompt="Clincial Observations"
                    trimMetadataTerms="false"
                    dependedParamRef="participantParams.dataset,clinicalVisitParams.visits_visitage_metadata_nf,clinicalVisitParams.visit_date,participantParams.duration_observation,clinicalVisitParams.households_nf,clinicalVisitParams.geographic_region,clinicalVisitParams.participants_nf">
      <help>
        Select observations based on their observation characteristics. 
      </help>
    </filterParamNew>

     <filterParamNew name="relative_visits_nf" 
                    metadataQueryRef="ClinicalVisitVQ.RelVisitMetaData"
                    ontologyQueryRef="ClinicalVisitVQ.RelVisitOntology"
                    prompt="Relative Observations"
                    trimMetadataTerms="false"
                    dependedParamRef="participantParams.dataset">
      <help>
        Select relative observations based on their observation characteristics. 
      </help>
    </filterParamNew>

       <filterParamNew name="visits_visitage_metadata_nf" 
                      metadataQueryRef="ClinicalVisitVQ.ClinicalVisitAgeMetaDataNf"
                      ontologyQueryRef="ClinicalVisitVQ.ClinicalVisitAgeOntologyNf"
                      backgroundQueryRef="ClinicalVisitVQ.ClinicalVisitAgeMetaDataBkgdNf"
                      prompt="Age at observation"
                      dependedParamRef="participantParams.dataset,clinicalVisitParams.geographic_region,clinicalVisitParams.visit_date,participantParams.duration_observation"
                      trimMetadataTerms="false">
         <help>
              Select the age of the participants at the time of their clinical observations.
         </help>
       </filterParamNew>

       <filterParamNew name="geographic_region" 
                       metadataQueryRef="ClinicalVisitVQ.RegionMetaData"
                       ontologyQueryRef="HouseholdVQ.RegionOntology"
                       useIdTransformSqlForInternalValue="true"
                       prompt="Participant"
                       dependedParamRef="participantParams.dataset"
                       trimMetadataTerms="false">
         <idTransformSql>%%clinicalVisitIdTransformSql2%%</idTransformSql>              
         <help>
           Select observations based on the participants subcounty where they live. 
         </help>
    </filterParamNew>

       <filterParamNew name="households_nf" 
                      metadataQueryRef="ClinicalVisitVQ.HouseholdMetaData"
                      ontologyQueryRef="ClinicalVisitVQ.HouseholdOntology"
                      backgroundQueryRef="ClinicalVisitVQ.HouseholdMetaDataBkgd"
                      useIdTransformSqlForInternalValue="true"
                      prompt="Households"
                      dependedParamRef="participantParams.dataset,clinicalVisitParams.visits_visitage_metadata_nf,clinicalVisitParams.visit_date,participantParams.duration_observation,clinicalVisitParams.geographic_region,clinicalVisitParams.participants_nf"
                      trimMetadataTerms="false">
         <idTransformSql>%%clinicalVisitIdTransformSql2%%</idTransformSql>                
         <help>
              Select observations based on the household characteristics where the participants live. 
         </help>
       </filterParamNew>

       <filterParamNew name="participants_nf" 
                      metadataQueryRef="ClinicalVisitVQ.ParticipantMetaData"
                      ontologyQueryRef="ClinicalVisitVQ.ParticipantOntology"
                      backgroundQueryRef="ClinicalVisitVQ.ParticipantMetaDataBkgd"
                      useIdTransformSqlForInternalValue="true"
                      prompt="Participants"
                      trimMetadataTerms="false"
                      dependedParamRef="participantParams.dataset,clinicalVisitParams.visits_visitage_metadata_nf,clinicalVisitParams.visit_date,participantParams.duration_observation,clinicalVisitParams.geographic_region">
         <idTransformSql>%%clinicalVisitIdTransformSql2%%</idTransformSql>   
         <help>
              Select participants based on their characteristics. 
         </help>
       </filterParamNew>

       <dateRangeParam name="visit_date"
                       prompt="Choose start and end dates "
                       minDate="2011-08-01"
                       maxDate="2016-06-30">
         <help>"select the earliest and latest dates to include for identifying observations and computing mosquito counts."</help>
<!--         <suggest default="{'min': '2011-08-05', 'max': '2016-06-30'}" />  -->

       </dateRangeParam>

        

<!--  NOTE: this is development yet to be done so commenting out for now 
       <flatVocabParam name="min_age_at_visit"
               prompt="Age at visit &gt;= "
               multiPick="false"
               quote="false"
               visible="false"
               dependedParamRef="clinicalVisitParams.visits_visitage_metadata_nf,clinicalVisitParams.geographic_region"
               queryRef="ClinicalVisitVQ.minAgeAtVisit">
      <help>Minimum age at observation.</help>
    </flatVocabParam>

    <flatVocabParam name="max_age_at_visit"
               prompt="Age at observation &lt;= "
               multiPick="false"
               quote="false"
               visible="false"
               dependedParamRef="clinicalVisitParams.visits_visitage_metadata_nf,clinicalVisitParams.geographic_region"
               queryRef="ClinicalVisitVQ.maxAgeAtVisit">
      <help>Minimum age at observation.</help>
    </flatVocabParam>
-->
    <numberRangeParam name="num_relative_events"
                       prompt="Number of matching related observations: "
                       integer="true"
                       min="1"
                       max="1000">
         <help>Set the range of the number of matching observations in order to keep or remove the observation from the previous step.</help>
         <suggest default="{'min': '1', 'max': '100'}" />  

       </numberRangeParam> 

    <numberRangeParam name="days_between"
                       prompt="Days between observations: "
                       integer="true"
                       min="0"
                       max="10000">
         <help>Set the range of days between observations to compare to observations selected in the previous step</help>
         <suggest default="{'min': '0', 'max': '10'}" />  

       </numberRangeParam> 

    <enumParam name="dateOperator"
               prompt="Keep or Remove observations "
               multiPick="false"
               quote="false"
               visible="true">
      <help>Choose how to compare these two observations.  Do you want to remove observations that have another observation within the specified time frame or keep them.</help>
      <enumList>
        <enumValue default="true">
          <term>remove</term>
          <internal>MINUS</internal>
        </enumValue>
        <enumValue>
          <term>keep</term>
          <internal>INTERSECT</internal>
        </enumValue>
      </enumList>
    </enumParam>

    <enumParam name="date_direction"
               prompt="Choose a direction "
               multiPick="false"
               quote="false"
               visible="true">
      <help>Choose a direction for the corresponding observation.  Will the matching observation be before or after relative to the first observation.</help>
      <enumList>
        <enumValue default="true">
          <term>after</term>
          <internal><![CDATA[>=]]></internal>
        </enumValue>
        <enumValue>
          <term>before</term>
          <internal><![CDATA[<=]]></internal>
        </enumValue>
      </enumList>
    </enumParam>

    <flatVocabParam name="use_relative_visits"
               prompt="Use related observations"
               multiPick="false"
               quote="false"
               visible="true"
               queryRef="ClinicalVisitVQ.useRelativeVisits">
      <help>You MUST change this parameter to Yes in order to use relative observations! If you decide to not use relative observations, set this parameter to No and make certain "Keep or remove observations" is set to remove.</help>
    </flatVocabParam>


    <flatVocabParam name="dateOperator_fv"
               prompt="Keep or Remove observations from previous step matching these criteria"
               multiPick="false"
               quote="false"
               visible="true"
               dependedParamRef="clinicalVisitParams.use_relative_visits"
               queryRef="ClinicalVisitVQ.dateOperator">
      <help>Choose how to compare these two observations.  Do you want to remove observations that have another observation within the specified time frame or keep them.</help>
    </flatVocabParam>

    <flatVocabParam name="date_direction_fv"
               prompt="Choose a direction "
               multiPick="false"
               quote="false"
               visible="true"
               queryRef="ClinicalVisitVQ.dateDirection">
      <help>Choose a direction for the corresponding observation.  Will the matching observation be before or after relative to the first observation.</help>
      <suggest default="after"/>
    </flatVocabParam>

    <answerParam name="clinical_visit_result"
                  prompt="Input Result Set"
                  readonly="true"
                  visible="false">
       <recordClass ref="ObservationRecordClasses.ObservationRecordClass" />
    </answerParam>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!--  MAL-ED specific .. should be injected -->  
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <filterParamNew name="visits_nf_maled" 
                    metadataQueryRef="ClinicalVisitVQ.VisitMetaData_maled"
                    ontologyQueryRef="ParticipantVQ.VisitOntology_maled"
                    backgroundQueryRef="ClinicalVisitVQ.VisitMetaDataBkgd_maled"
                    prompt="Observations"
                    trimMetadataTerms="false"
                    dependedParamRef="participantParams.dataset,clinicalVisitParams.households_nf_maled">
      <help>
        Select observations based on their observation characteristics. 
      </help>
    </filterParamNew>

       <filterParamNew name="geographic_region_maled" 
                       metadataQueryRef="ClinicalVisitVQ.RegionMetaData_maled"
                       ontologyQueryRef="ParticipantVQ.RegionOntology_maled"
                       prompt="Participant"
                       dependedParamRef="participantParams.dataset"
                       trimMetadataTerms="false">
         <idTransformSql>%%clinicalVisitIdTransformSql1%%</idTransformSql>  
         <help>
           Select observations based on the participants subcounty where they live. 
         </help>
    </filterParamNew>

       <filterParamNew name="households_nf_maled" 
                      metadataQueryRef="ClinicalVisitVQ.HouseholdMetaData_maled"
                      ontologyQueryRef="ParticipantVQ.HouseholdOntology_maled"
                      backgroundQueryRef="ClinicalVisitVQ.HouseholdMetaDataBkgd_maled"
                      useIdTransformSqlForInternalValue="true"
                      prompt="Households"
                      dependedParamRef="participantParams.dataset,clinicalVisitParams.participants_nf_maled"
                      trimMetadataTerms="false">
         <idTransformSql>%%clinicalVisitIdTransformSql1%%</idTransformSql>          
         <help>
              Select observations based on the household characteristics where the participants live. 
         </help>
       </filterParamNew>

       <filterParamNew name="participants_nf_maled" 
                      metadataQueryRef="ClinicalVisitVQ.ParticipantMetaData_maled"
                      ontologyQueryRef="ParticipantVQ.ParticipantOntology_maled"
                      backgroundQueryRef="ClinicalVisitVQ.ParticipantMetaDataBkgd_maled"
                      prompt="Participants"
                      trimMetadataTerms="false"
                      dependedParamRef="participantParams.dataset,clinicalVisitParams.geographic_region_maled">
         <idTransformSql>%%clinicalVisitIdTransformSql1%%</idTransformSql>               
         <help>
              Select participants based on their characteristics. 
         </help>
       </filterParamNew>

    <filterParamNew name="relative_visits_nf_maled" 
                    metadataQueryRef="ClinicalVisitVQ.RelVisitMetaData_maled"
                    ontologyQueryRef="ClinicalVisitVQ.RelVisitOntology_maled"
                    prompt="Related Observations"
                    trimMetadataTerms="false" >
      <help>
        Select related observations based on their characteristics. 
      </help>
    </filterParamNew>

  </paramSet>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!--  Vocab queries-->  
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

 <querySet name="ClinicalVisitVQ" queryType="vocab" isCacheable="true">

        <sqlQuery name="dateDirection">
            <column name="display" />
            <column name="internal" />
            <column name="term" />
            <!-- `display` is the opposite of `term` because it is arranged in a sentence where the operands are the opposite of the query -->
            <sql>
              <![CDATA[
                       SELECT 'before' as display, 'after' as term, '>=' as internal from dual
                       UNION
                       SELECT 'after' as display, 'before' as term, '<=' as internal from dual
              ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="dateOperator">
          <paramRef ref="clinicalVisitParams.use_relative_visits" />  
          <column name="display" />
          <column name="internal" />
          <column name="term" />
          <sql>
            <![CDATA[
                     SELECT * from (
                     SELECT 'Remove' as display, 'remove' as term, 'MINUS' as internal from dual
                     UNION
                     SELECT 'Keep' as display, 'keep' as term, 'INTERSECT' as internal from dual
                     where $$use_relative_visits$$ = 1  )
                     ORDER by term desc
            ]]>
            </sql>
        </sqlQuery>


        <sqlQuery name="useRelativeVisits">
            <column name="internal" />
            <column name="term" />
            <sql>
            <![CDATA[
                     SELECT 'No' as term, 0 as internal from dual
                     UNION
                     SELECT 'Yes' as term, 1 as internal from dual
            ]]>
            </sql>
        </sqlQuery>

<!--
                <sqlQuery name="minAgeAtVisit">
            <paramRef ref="clinicalVisitParams.visits_visitage_metadata_nf" />
            <paramRef ref="clinicalVisitParams.geographic_region" />
            <column name="internal" />
            <column name="term" />
            <sql>
            <![CDATA[
select min(EUPATH_0000113) as term, min(EUPATH_0000113) as internal 
   from apidbtuning.clinicalvisitattributes 
   where protocol_app_node_id in ($$visits_visitage_metadata_nf$$)
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="maxAgeAtVisit">
            <paramRef ref="clinicalVisitParams.visits_visitage_metadata_nf" />
            <paramRef ref="clinicalVisitParams.geographic_region" />
            <column name="internal" />
            <column name="term" />
            <sql>
            <![CDATA[
select max(EUPATH_0000113) as term, max(EUPATH_0000113) as internal 
   from apidbtuning.clinicalvisitattributes 
   where protocol_app_node_id in ($$visits_visitage_metadata_nf$$)
            ]]>
            </sql>
        </sqlQuery>
-->

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!--  PRISM specific .. should be injected -->  
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

   <sqlQuery name="ClinicalVisitAgeOntologyNf">
      <paramRef ref="clinicalVisitParams.geographic_region" /> 
      <paramRef ref="clinicalVisitParams.visit_date" /> 
      <paramRef ref="participantParams.duration_observation" />  
      <paramRef ref="participantParams.dataset" />  
      <column name="ontology_term_name"/>
      <column name="parent_ontology_term_name"/>
      <column name="display_name"/>
      <column name="description"/>
      <column name="type"/>
      <column name="units"/>
      <column name="precision"/>
      <column name="is_range"/>
      <sql>
        <![CDATA[
                       select o.ontology_term_name, 'dummy' as parent_ontology_term_name, o.display_name, o.description, o.units,o.type,o.is_range,o.precision
from apidbtuning.metadataontology o
where ontology_term_name = 'Age at time of visit'
union
                 select 'dummy' as ontology_term_name, null as parent_ontology_term_name, 'Household' as display_name, null as description, null as units, 'string' as type, 0 as is_range,
                 null as precision from dual
    ]]>   
        </sql>
      </sqlQuery>
          
   <sqlQuery name="ClinicalVisitAgeMetaDataNf">
      <paramRef ref="clinicalVisitParams.geographic_region" /> 
      <paramRef ref="clinicalVisitParams.visit_date" /> 
      <paramRef ref="participantParams.duration_observation" />  
      <paramRef ref="participantParams.dataset" />  
      <column name="ontology_term_name"/>
      <column name="internal"/>
      <column name="number_value"/>
      <column name="date_value"/>
      <column name="string_value"/>
      <sql>
        <![CDATA[
select distinct cva.protocol_app_node_id as internal, m.property as ontology_term_name, '1' as string_value, cva.EUPATH_0000113 as number_value, cast(null as date) as date_value
 from apidbtuning.participantattributes pa, apidbtuning.protocolappnodeio io, apidbtuning.clinicalvisitattributes cva, apidbtuning.metadatatype m
 where cva.protocol_app_node_id in ($$geographic_region$$)
 and cva.EUPATH_0000091 >= $$visit_date.min$$
 and cva.EUPATH_0000091 <= $$visit_date.max$$
 and io.output_node_id = cva.protocol_app_node_id
 and pa.protocol_app_node_id = io.input_node_id
 and m.source_id = 'EUPATH_0000113'
 AND least(pa.EUPATH_0000152, $$visit_date.max$$) - 
 greatest(pa.EUPATH_0000151, $$visit_date.min$$) + 1 >= $$duration_observation$$
         ]]>   
      </sql>
   </sqlQuery>

      <sqlQuery name="ClinicalVisitAgeMetaDataBkgdNf" >
      <paramRef ref="clinicalVisitParams.geographic_region" /> 
      <paramRef ref="clinicalVisitParams.visit_date" /> 
      <paramRef ref="participantParams.duration_observation" />  
      <paramRef ref="participantParams.dataset" />  
      <column name="ontology_term_name"/>
      <column name="internal"/>
      <column name="number_value"/>
      <column name="date_value"/>
      <column name="string_value"/>
      <sql>
        <![CDATA[
select distinct cva.protocol_app_node_id as internal, m.property as ontology_term_name, '1' as string_value, cva.EUPATH_0000113 as number_value, cast(null as date) as date_value
 from apidbtuning.participantattributes pa, apidbtuning.protocolappnodeio io, apidbtuning.clinicalvisitattributes cva, apidbtuning.metadatatype m
 where io.output_node_id = cva.protocol_app_node_id
 and pa.protocol_app_node_id = io.input_node_id
 and m.source_id = 'EUPATH_0000113'
          ]]>   
      </sql>
      </sqlQuery>

    <sqlQuery name="RegionMetaData" >
      <paramRef ref="participantParams.dataset" />  
      <column name="ontology_term_name"/>
      <column name="internal"/>
      <column name="number_value"/>
      <column name="date_value"/>
      <column name="string_value"/>
      <sql>
        <![CDATA[
select distinct ioa.output_node_id as internal, mt.property as ontology_term_name, da.EUPATH_0000054 as string_value,
cast(null as number) as number_value, cast(null as date) as date_value
from apidbtuning.householdattributes da,apidbtuning.protocolappnodeio ioa, apidbtuning.protocolappnodeio iob,
apidbtuning.clinicalvisitattributes cva,apidbtuning.metadatatype mt
where da.protocol_app_node_id = ioa.input_node_id
and ioa.output_node_id = iob.input_node_id
and iob.output_node_id = cva.protocol_app_node_id
and mt.source_id = 'EUPATH_0000054'
        ]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="HouseholdOntology">
      <column name="ontology_term_name"/>
      <column name="parent_ontology_term_name"/>
      <column name="display_name"/>
      <column name="description"/>
      <column name="type"/>
      <column name="units"/>
      <column name="precision"/>
      <column name="is_range"/>
      <sql>
        <![CDATA[
   with leaf as (
 select o.ontology_term_name, CASE WHEN o.parent_ontology_term_name = 'Thing' THEN null ELSE o.parent_ontology_term_name END as parent_ontology_term_name, nvl(o.display_name,o.ontology_term_name) as display_name, o.description, o.units,o.type,o.is_range,o.precision
from apidbtuning.metadataontology o, 
(select distinct term
 from apidbtuning.metadata
 where dataset_name = 'ISASimple_ICEMR_PRISM_surveillance_RSRC' --$$dataset$$
 and category = 'Household type'
 and source_id != 'EUPATH_0000094') md
 where o.ontology_term_name = md.term),
first as (
 select o.ontology_term_name, CASE WHEN o.parent_ontology_term_name = 'Thing' THEN null ELSE o.parent_ontology_term_name END as parent_ontology_term_name, nvl(o.display_name,o.ontology_term_name) as display_name, o.description, o.units,o.type,o.is_range,o.precision
 from apidbtuning.metadataontology o, (select distinct parent_ontology_term_name from leaf where parent_ontology_term_name is not null) par
 where o.ontology_term_name = par.parent_ontology_term_name),
 second as (
 select o.ontology_term_name, CASE WHEN o.parent_ontology_term_name = 'Thing' THEN null ELSE o.parent_ontology_term_name END as parent_ontology_term_name, nvl(o.display_name,o.ontology_term_name) as display_name, o.description, o.units,o.type,o.is_range,o.precision
 from apidbtuning.metadataontology o, (select distinct parent_ontology_term_name from first where parent_ontology_term_name is not null) gpar
 where o.ontology_term_name = gpar.parent_ontology_term_name)
 select * from leaf
 union
 select * from first
 union
 select * from second
 union
 select o.ontology_term_name, CASE WHEN o.parent_ontology_term_name = 'Thing' THEN null ELSE o.parent_ontology_term_name END as parent_ontology_term_name, nvl(o.display_name,o.ontology_term_name) as display_name, o.description, o.units,o.type,o.is_range,o.precision
 from apidbtuning.metadataontology o, (select distinct parent_ontology_term_name from second where parent_ontology_term_name is not null) ggpar
 where o.ontology_term_name = ggpar.parent_ontology_term_name
 union
 select 'average anopheles' as ontology_term_name, null as parent_ontology_term_name, 'Average Anopheles Collected' as display_name, 'Average number of Anopheles collected in monthly CDC light traps during the dates of this search' as description, null as units, 'number' as type, 1 as is_range,
 null as precision from dual
      ]]>
      </sql>
      </sqlQuery>

    <sqlQuery name="HouseholdMetaData" >
      <paramRef ref="clinicalVisitParams.visits_visitage_metadata_nf" />
      <paramRef ref="clinicalVisitParams.visit_date" /> 
      <paramRef ref="participantParams.duration_observation" />  
      <paramRef ref="clinicalVisitParams.geographic_region" />  
      <paramRef ref="clinicalVisitParams.participants_nf" />  
      <paramRef ref="participantParams.dataset" />  
      <column name="ontology_term_name"/>
      <column name="internal"/>
      <column name="number_value"/>
      <column name="date_value"/>
      <column name="string_value"/>
      <sql>
         <![CDATA[
with part as ( select distinct dw.protocol_app_node_id as household_id, pa.protocol_app_node_id as part_id
  from apidbtuning.participantattributes pa, apidbtuning.protocolappnodeio io, apidbtuning.protocolappnodeio iov, apidbtuning.householdattributes dw
   where iov.output_node_id in ($$participants_nf$$)
       and pa.protocol_app_node_id = iov.input_node_id
       and pa.protocol_app_node_id = io.output_node_id
       and io.input_node_id = dw.protocol_app_node_id)
 select distinct Part.household_id as internal, m.term as ontology_term_name, m.string_value, m.number_value, m.date_value
 from ApidbTuning.MetaDataWithoutNulls m, part
 where m.dataset_name = $$dataset$$
 and m.category = 'Household type'
 and part.household_id = m.protocol_app_node_id
 union
 select distinct part.household_id as internal, 'average anopheles' as ontology_term_name, null as string_value, nvl(mos.avg_anoph,0) as number_value, null as date_value
 from (select da.protocol_app_node_id, round(avg(nvl(EUPATH_0000192,0)+nvl(EUPATH_0000193,0)+nvl(EUPATH_0000204,0)+nvl(EUPATH_0000205,0)),1) as avg_anoph
  from apidbtuning.householdattributes da, apidbtuning.protocolappnodeio io, apidbtuning.lighttrapattributes la
  where da.protocol_app_node_id = io.input_node_id
  and la.protocol_app_node_id = io.output_node_id
  and la.OBI_0001619 >= $$visit_date.min$$ 
  and la.OBI_0001619 <= $$visit_date.max$$ 
  group by da.protocol_app_node_id) mos, part
  where part.household_id = mos.protocol_app_node_id(+)
          ]]>
    </sql>    

    </sqlQuery>

    <sqlQuery name="HouseholdMetaDataBkgd">
      <paramRef ref="clinicalVisitParams.visits_visitage_metadata_nf" />
      <paramRef ref="clinicalVisitParams.visit_date" /> 
      <paramRef ref="participantParams.duration_observation" />  
      <paramRef ref="clinicalVisitParams.geographic_region" />  
      <paramRef ref="clinicalVisitParams.participants_nf" />  
      <paramRef ref="participantParams.dataset" />  
      <column name="ontology_term_name"/>
      <column name="internal"/>
      <column name="number_value"/>
      <column name="date_value"/>
      <column name="string_value"/>
      <sql>
         <![CDATA[
with part as ( select distinct iod.input_node_id as household_id,pa.protocol_app_node_id as part_id
  from (select min(EUPATH_0000113) as min_age, max(EUPATH_0000113) as max_age
   from apidbtuning.clinicalvisitattributes 
   ) age,
   apidbtuning.participantattributes pa, apidbtuning.protocolappnodeio iop, apidbtuning.protocolappnodeio iod
   where pa.protocol_app_node_id = iop.input_node_id
   and pa.protocol_app_node_id = iod.output_node_id
)
 select distinct Part.household_id as internal, m.term as ontology_term_name, m.string_value, m.number_value, m.date_value
 from ApidbTuning.MetaDataWithoutNulls m, part
 where m.dataset_name = $$dataset$$
 and m.category = 'Household type'
 and part.household_id = m.protocol_app_node_id
 union
 select distinct part.household_id as internal, 'average anopheles' as ontology_term_name, null as string_value, nvl(mos.avg_anoph,0) as number_value, null as date_value
 from (select da.protocol_app_node_id, round(avg(nvl(EUPATH_0000192,0)+nvl(EUPATH_0000193,0)+nvl(EUPATH_0000204,0)+nvl(EUPATH_0000205,0)),1) as avg_anoph
  from apidbtuning.householdattributes da, apidbtuning.protocolappnodeio io, apidbtuning.lighttrapattributes la
  where da.protocol_app_node_id = io.input_node_id
  and la.protocol_app_node_id = io.output_node_id
  group by da.protocol_app_node_id) mos, part
  where part.household_id = mos.protocol_app_node_id(+)
          ]]>
    </sql>    

    </sqlQuery>

    <sqlQuery name="ParticipantOntology">
      <column name="ontology_term_name"/>
      <column name="parent_ontology_term_name"/>
      <column name="display_name"/>
      <column name="description"/>
      <column name="type"/>
      <column name="units"/>
      <column name="precision"/>
      <column name="is_range"/>
      <sql>
         <![CDATA[
with leaf as ( 
 select o.ontology_term_name, CASE WHEN o.parent_ontology_term_name = 'Thing' THEN null ELSE o.parent_ontology_term_name END as parent_ontology_term_name, nvl(o.display_name,o.ontology_term_name) as display_name, o.description, o.units,o.type,o.is_range,o.precision
from apidbtuning.metadataontology o, 
(select distinct term
 from apidbtuning.metadata
 where dataset_name = 'ISASimple_ICEMR_PRISM_surveillance_RSRC' --$$dataset$$
 and category = 'Participant'
 and source_id != 'EUPATH_0000032') md
 where o.ontology_term_name = md.term),
first as (
 select o.ontology_term_name, CASE WHEN o.parent_ontology_term_name = 'Thing' THEN null ELSE o.parent_ontology_term_name END as parent_ontology_term_name, nvl(o.display_name,o.ontology_term_name) as display_name, o.description, o.units,o.type,o.is_range,o.precision
 from apidbtuning.metadataontology o, (select distinct parent_ontology_term_name from leaf where parent_ontology_term_name is not null) par
 where o.ontology_term_name = par.parent_ontology_term_name),
 second as (
 select o.ontology_term_name, CASE WHEN o.parent_ontology_term_name = 'Thing' THEN null ELSE o.parent_ontology_term_name END as parent_ontology_term_name, nvl(o.display_name,o.ontology_term_name) as display_name, o.description, o.units,o.type,o.is_range,o.precision
 from apidbtuning.metadataontology o, (select distinct parent_ontology_term_name from first where parent_ontology_term_name is not null) gpar
 where o.ontology_term_name = gpar.parent_ontology_term_name)
 select * from leaf
 union
 select * from first
 union
 select * from second
 union
 select o.ontology_term_name, CASE WHEN o.parent_ontology_term_name = 'Thing' THEN null ELSE o.parent_ontology_term_name END as parent_ontology_term_name, nvl(o.display_name,o.ontology_term_name) as display_name, o.description, o.units,o.type,o.is_range,o.precision
 from apidbtuning.metadataontology o, (select distinct parent_ontology_term_name from second where parent_ontology_term_name is not null) ggpar
 where o.ontology_term_name = ggpar.parent_ontology_term_name
         ]]>
    </sql>
   </sqlQuery>

    <sqlQuery name="ParticipantMetaData" >
      <paramRef ref="clinicalVisitParams.visits_visitage_metadata_nf" />
      <paramRef ref="clinicalVisitParams.visit_date" /> 
      <paramRef ref="participantParams.duration_observation" />  
      <paramRef ref="clinicalVisitParams.geographic_region" />  
      <paramRef ref="participantParams.dataset" />  
      <column name="ontology_term_name"/>
      <column name="internal"/>
      <column name="number_value"/>
      <column name="date_value"/>
      <column name="string_value"/>
      <sql>
         <![CDATA[
 select distinct pa.protocol_app_node_id as internal, m.term as ontology_term_name, m.string_value, m.number_value, m.date_value
from (select min(EUPATH_0000113) as min_age, max(EUPATH_0000113) as max_age
   from apidbtuning.clinicalvisitattributes 
   where protocol_app_node_id in ($$visits_visitage_metadata_nf$$)
   ) age, ApidbTuning.MetaDataWithoutNulls m, apidbtuning.protocolappnodeio io, apidbtuning.participantattributes pa
where io.output_node_id in ($$geographic_region$$)
   and io.input_node_id = pa.protocol_app_node_id
   AND least(pa.EUPATH_0000152, $$visit_date.max$$, pa.EUPATH_0000032 + ( age.max_age * 365)) - 
       greatest(pa.EUPATH_0000151, $$visit_date.min$$, pa.EUPATH_0000032 + ( age.min_age * 365)) + 1 >= $$duration_observation$$
       and pa.protocol_app_node_id = io.input_node_id
       and io.output_node_id in ($$visits_visitage_metadata_nf$$)
       and pa.protocol_app_node_id = m.protocol_app_node_id
 and m.dataset_name = $$dataset$$
 and m.category = 'Participant'
          ]]>
    </sql>
    </sqlQuery>
 
    <sqlQuery name="ParticipantMetaDataBkgd">
      <paramRef ref="clinicalVisitParams.visits_visitage_metadata_nf" />
      <paramRef ref="clinicalVisitParams.visit_date" /> 
      <paramRef ref="participantParams.duration_observation" />  
      <paramRef ref="clinicalVisitParams.geographic_region" />  
      <paramRef ref="participantParams.dataset" />  
      <column name="ontology_term_name"/>
      <column name="internal"/>
      <column name="number_value"/>
      <column name="date_value"/>
      <column name="string_value"/>
      <sql>
         <![CDATA[
select distinct m.protocol_app_node_id as internal, m.term as ontology_term_name, m.string_value, m.number_value, m.date_value
from ApidbTuning.MetaDataWithoutNulls m
 where m.dataset_name = $$dataset$$
 and m.category = 'Participant'
          ]]>
    </sql>
    </sqlQuery>


    <sqlQuery name="VisitOntology">
      <column name="ontology_term_name"/>
      <column name="parent_ontology_term_name"/>
      <column name="display_name"/>
      <column name="description"/>
      <column name="type"/>
      <column name="units"/>
      <column name="precision"/>
      <column name="is_range"/>
      <sql>
         <![CDATA[
with leaf as ( select o.ontology_term_name, CASE WHEN o.parent_ontology_term_name = 'Thing' THEN null ELSE o.parent_ontology_term_name END as parent_ontology_term_name, nvl(o.display_name,o.ontology_term_name) as display_name, o.description, o.units,o.type,o.is_range,o.precision
from apidbtuning.metadataontology o, 
(select distinct term
 from apidbtuning.metadata
 where dataset_name = 'ISASimple_ICEMR_PRISM_surveillance_RSRC' --$$dataset$$
 and category in ('Visit','Specimen type')
 and source_id != 'EUPATH_0000094') md
 where o.ontology_term_name = md.term),
first as (
 select o.ontology_term_name, CASE WHEN o.parent_ontology_term_name = 'Thing' THEN null ELSE o.parent_ontology_term_name END as parent_ontology_term_name, nvl(o.display_name,o.ontology_term_name) as display_name, o.description, o.units,o.type,o.is_range,o.precision
 from apidbtuning.metadataontology o, (select distinct parent_ontology_term_name from leaf where parent_ontology_term_name is not null) par
 where o.ontology_term_name = par.parent_ontology_term_name),
 second as (
 select o.ontology_term_name, CASE WHEN o.parent_ontology_term_name = 'Thing' THEN null ELSE o.parent_ontology_term_name END as parent_ontology_term_name, nvl(o.display_name,o.ontology_term_name) as display_name, o.description, o.units,o.type,o.is_range,o.precision
 from apidbtuning.metadataontology o, (select distinct parent_ontology_term_name from first where parent_ontology_term_name is not null) gpar
 where o.ontology_term_name = gpar.parent_ontology_term_name)
 select * from leaf
 union
 select * from first
 union
 select * from second
 union
 select o.ontology_term_name, CASE WHEN o.parent_ontology_term_name = 'Thing' THEN null ELSE o.parent_ontology_term_name END as parent_ontology_term_name, nvl(o.display_name,o.ontology_term_name) as display_name, o.description, o.units,o.type,o.is_range,o.precision
 from apidbtuning.metadataontology o, (select distinct parent_ontology_term_name from second where parent_ontology_term_name is not null) ggpar
 where o.ontology_term_name = ggpar.parent_ontology_term_name
         ]]>
    </sql>
   </sqlQuery>

   <sqlQuery name="RelVisitOntology">
     <column name="ontology_term_name"/>
     <column name="parent_ontology_term_name"/>
     <column name="display_name"/>
     <column name="description"/>
     <column name="type"/>
     <column name="units"/>
     <column name="precision"/>
     <column name="is_range"/>
    <sql>
         <![CDATA[
with leaf as ( select o.ontology_term_name, CASE WHEN o.parent_ontology_term_name = 'Thing' THEN null ELSE o.parent_ontology_term_name END as parent_ontology_term_name, nvl(o.display_name,o.ontology_term_name) as display_name, o.description, o.units,o.type,o.is_range,o.precision
from apidbtuning.metadataontology o, 
(select distinct term
 from apidbtuning.metadata
 where dataset_name = 'ISASimple_ICEMR_PRISM_surveillance_RSRC' --$$dataset$$
 and category in ('Visit','Specimen type')
 and source_id != 'EUPATH_0000094') md
 where o.ontology_term_name = md.term),
first as (
 select o.ontology_term_name, CASE WHEN o.parent_ontology_term_name = 'Thing' THEN null ELSE o.parent_ontology_term_name END as parent_ontology_term_name, nvl(o.display_name,o.ontology_term_name) as display_name, o.description, o.units,o.type,o.is_range,o.precision
 from apidbtuning.metadataontology o, (select distinct parent_ontology_term_name from leaf where parent_ontology_term_name is not null) par
 where o.ontology_term_name = par.parent_ontology_term_name),
 second as (
 select o.ontology_term_name, CASE WHEN o.parent_ontology_term_name = 'Thing' THEN null ELSE o.parent_ontology_term_name END as parent_ontology_term_name, nvl(o.display_name,o.ontology_term_name) as display_name, o.description, o.units,o.type,o.is_range,o.precision
 from apidbtuning.metadataontology o, (select distinct parent_ontology_term_name from first where parent_ontology_term_name is not null) gpar
 where o.ontology_term_name = gpar.parent_ontology_term_name)
 select * from leaf
 union
 select * from first
 union
 select * from second
 union
 select o.ontology_term_name, CASE WHEN o.parent_ontology_term_name = 'Thing' THEN null ELSE o.parent_ontology_term_name END as parent_ontology_term_name, nvl(o.display_name,o.ontology_term_name) as display_name, o.description, o.units,o.type,o.is_range,o.precision
 from apidbtuning.metadataontology o, (select distinct parent_ontology_term_name from second where parent_ontology_term_name is not null) ggpar
 where o.ontology_term_name = ggpar.parent_ontology_term_name
         ]]>
    </sql>
   </sqlQuery>

       <sqlQuery name="VisitMetaData" >
         <paramRef ref="clinicalVisitParams.visits_visitage_metadata_nf" />
         <paramRef ref="clinicalVisitParams.visit_date" /> 
         <paramRef ref="participantParams.duration_observation" />  
         <paramRef ref="clinicalVisitParams.households_nf" />  
         <paramRef ref="clinicalVisitParams.geographic_region" />  
         <paramRef ref="clinicalVisitParams.participants_nf" />  
         <paramRef ref="participantParams.dataset" />  
         <column name="ontology_term_name"/>
         <column name="internal"/>
         <column name="number_value"/>
         <column name="date_value"/>
         <column name="string_value"/>
         <sql>
           <![CDATA[
select distinct m.protocol_app_node_id as internal, m.term as ontology_term_name, m.string_value, m.number_value, m.date_value
 from ApidbTuning.MetaDataWithoutNulls m
 where m.dataset_name = $$dataset$$
 and m.category = 'Visit'
 and m.protocol_app_node_id in ($$households_nf$$)
 union
 select io.input_node_id as internal, m.term as ontology_term_name, m.string_value, m.number_value, m.date_value
from ApidbTuning.MetaDataWithoutNulls m, apidbtuning.protocolappnodeio io
where dataset_name = $$dataset$$
and m.category = 'Specimen type' 
and m.term = 'Specimen type'
and io.output_node_id = m.protocol_app_node_id
and io.input_node_id in ($$households_nf$$)
          ]]>
    </sql>
    </sqlQuery>    

    

    <sqlQuery name="VisitMetaDataBkgd">
         <paramRef ref="clinicalVisitParams.visits_visitage_metadata_nf" />
         <paramRef ref="clinicalVisitParams.visit_date" /> 
         <paramRef ref="participantParams.duration_observation" />  
         <paramRef ref="clinicalVisitParams.households_nf" />  
         <paramRef ref="clinicalVisitParams.geographic_region" />  
         <paramRef ref="clinicalVisitParams.participants_nf" />  
         <paramRef ref="participantParams.dataset" />  
         <column name="ontology_term_name"/>
         <column name="internal"/>
         <column name="number_value"/>
         <column name="date_value"/>
         <column name="string_value"/>
         <sql>
           <![CDATA[
 select distinct protocol_app_node_id as internal, term as ontology_term_name, string_value, number_value, date_value
 from ApidbTuning.MetaDataWithoutNulls 
 where dataset_name = $$dataset$$
 and category = 'Visit'
 union
 select io.input_node_id as internal, m.term as ontology_term_name, m.string_value, m.number_value, m.date_value
from ApidbTuning.MetaDataWithoutNulls m, apidbtuning.protocolappnodeio io
where dataset_name = $$dataset$$
and m.category = 'Specimen type' 
and m.term = 'Specimen type'
and io.output_node_id = m.protocol_app_node_id
          ]]>
    </sql>
    </sqlQuery>

    <sqlQuery name="RelVisitMetaData">
      <paramRef ref="participantParams.dataset" />  
      <column name="ontology_term_name"/>
      <column name="internal"/>
      <column name="number_value"/>
      <column name="date_value"/>
      <column name="string_value"/>
      <sql>
        <![CDATA[
                select distinct protocol_app_node_id as internal, term as ontology_term_name,
                       string_value, number_value, date_value
                from ApidbTuning.MetaDataWithoutNulls 
                where dataset_name = 'ISASimple_ICEMR_PRISM_surveillance_RSRC' --$$dataset$$
                  and category = 'Visit'
              union
                select io.input_node_id as internal, m.term as ontology_term_name,
                       m.string_value, m.number_value, m.date_value
                from ApidbTuning.MetaDataWithoutNulls m, apidbtuning.protocolappnodeio io
                where dataset_name = 'ISASimple_ICEMR_PRISM_surveillance_RSRC' --$$dataset$$
                  and m.category = 'Specimen type' 
                  and m.term = 'Specimen type'
                  and io.output_node_id = m.protocol_app_node_id
          ]]>
    </sql>
    </sqlQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!--  MAL-ED specific .. should be injected -->  
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->


   <sqlQuery name="ParticipantMetaData_maled" isCacheable="true">
     <paramRef ref="clinicalVisitParams.geographic_region_maled" />  
     <paramRef ref="participantParams.dataset" />  
     <column name="ontology_term_name"/>
      <column name="internal"/>
      <column name="number_value"/>
      <column name="date_value"/>
      <column name="string_value"/>
      <sql>
         <![CDATA[
select distinct m.protocol_app_node_id as internal, m.source_id as ontology_term_name, m.string_value, m.number_value, m.date_value
from ApidbTuning.MetaDataWithoutNulls m
 where m.dataset_name = 'ISASimple_Gates_MAL-ED_stdm_tp_RSRC' --$$dataset$$
 and m.category = 'Participant'
 and m.protocol_app_node_id in ($$geographic_region_maled$$)
          ]]>
    </sql>
    </sqlQuery>

    <sqlQuery name="ParticipantMetaDataBkgd_maled">
      <paramRef ref="clinicalVisitParams.geographic_region_maled" />  
      <paramRef ref="participantParams.dataset" />  
      <column name="ontology_term_name"/>
      <column name="internal"/>
      <column name="number_value"/>
      <column name="date_value"/>
      <column name="string_value"/>
      <sql>
        <![CDATA[
select distinct m.protocol_app_node_id as internal, m.source_id as ontology_term_name, m.string_value, m.number_value, m.date_value
from ApidbTuning.MetaDataWithoutNulls m
 where m.dataset_name = 'ISASimple_Gates_MAL-ED_stdm_tp_RSRC' --$$dataset$$
 and m.category = 'Participant'
          ]]>
    </sql>
    </sqlQuery>

    <sqlQuery name="VisitMetaData_maled" isCacheable="true">
         <paramRef ref="clinicalVisitParams.households_nf_maled" />  
         <paramRef ref="participantParams.dataset" />  
         <column name="ontology_term_name"/>
         <column name="internal"/>
         <column name="number_value"/>
         <column name="date_value"/>
         <column name="string_value"/>
         <sql>
           <![CDATA[
select distinct m.protocol_app_node_id as internal, source_id as ontology_term_name, string_value, number_value, date_value
 from ApidbTuning.MetaDataWithoutNulls m 
 where m.dataset_name = 'ISASimple_Gates_MAL-ED_stdm_tp_RSRC' --$$dataset$$
 and m.category = 'Event'
 and m.protocol_app_node_id in ($$households_nf_maled$$)
          ]]>
    </sql>
    </sqlQuery>    

    <sqlQuery name="VisitMetaDataBkgd_maled">
      <paramRef ref="clinicalVisitParams.households_nf_maled" />  
      <paramRef ref="participantParams.dataset" />  
      <column name="ontology_term_name"/>
      <column name="internal"/>
      <column name="number_value"/>
      <column name="date_value"/>
      <column name="string_value"/>
      <sql>
        <![CDATA[
select distinct m.protocol_app_node_id as internal, source_id as ontology_term_name, string_value, number_value, date_value
 from ApidbTuning.MetaDataWithoutNulls m 
 where m.dataset_name = 'ISASimple_Gates_MAL-ED_stdm_tp_RSRC' --$$dataset$$
 and m.category = 'Event'
          ]]>
    </sql>
    </sqlQuery>

    <sqlQuery name="RegionMetaData_maled" >
      <paramRef ref="participantParams.dataset" />  
      <column name="ontology_term_name"/>
      <column name="internal"/>
      <column name="number_value"/>
      <column name="date_value"/>
      <column name="string_value"/>
      <sql>
        <![CDATA[
select io.part_id as internal, m.source_id as ontology_term_name, m.string_value, m.number_value, m.date_value
 from ApidbTuning.MetaDataWithoutNulls m, ( select distinct io.input_node_id as hh_id, io.output_node_id as part_id, ioe.output_node_id as event_id
 from apidbtuning.protocolappnodeio io, apidbtuning.protocolappnodeio ioe
 where io.input_type_source_id = 'PCO_0000024'
 and io.output_node_id = ioe.input_node_id
 and ioe.output_type_source_id = 'EUPATH_0000738') io
 where m.protocol_app_node_id = io.hh_id
 and m.dataset_name = 'ISASimple_Gates_MAL-ED_stdm_tp_RSRC' --$$dataset$$
 and m.category = 'Household'
 and m.source_id in ('EUPATH_0000054','OBI_0001627','EUPATH_0000452')
        ]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="HouseholdMetaData_maled" isCacheable="true">
      <paramRef ref="clinicalVisitParams.participants_nf_maled" />  
      <paramRef ref="participantParams.dataset" />  
      <column name="ontology_term_name"/>
      <column name="internal"/>
      <column name="number_value"/>
      <column name="date_value"/>
      <column name="string_value"/>
      <sql>
         <![CDATA[
select io.part_id as internal, m.source_id as ontology_term_name, m.string_value, m.number_value, m.date_value
 from ApidbTuning.MetaDataWithoutNulls m, ( select distinct io.input_node_id as hh_id, io.output_node_id as part_id
 from apidbtuning.protocolappnodeio io
 where io.output_node_id in ($$participants_nf_maled$$)
 and io.input_type_source_id = 'PCO_0000024') io
 where m.protocol_app_node_id = io.hh_id
 and m.dataset_name = 'ISASimple_Gates_MAL-ED_stdm_tp_RSRC' --$$dataset$$
 and m.category = 'Household'
          ]]>
    </sql>    

    </sqlQuery>

    <sqlQuery name="HouseholdMetaDataBkgd_maled">
      <paramRef ref="participantParams.dataset" />  
      <paramRef ref="clinicalVisitParams.participants_nf_maled" />  
      <column name="ontology_term_name"/>
      <column name="internal"/>
      <column name="number_value"/>
      <column name="date_value"/>
      <column name="string_value"/>
      <sql>
         <![CDATA[
select io.part_id as internal, m.source_id as ontology_term_name, m.string_value, m.number_value, m.date_value
 from ApidbTuning.MetaDataWithoutNulls m, ( select distinct io.input_node_id as hh_id, io.output_node_id as part_id
 from apidbtuning.protocolappnodeio io
 where io.output_type_source_id = 'EUPATH_0000096' 
 and io.input_type_source_id = 'PCO_0000024') io
 where m.protocol_app_node_id = io.hh_id
 and m.dataset_name = 'ISASimple_Gates_MAL-ED_stdm_tp_RSRC' --$$dataset$$
 and m.category = 'Household'
          ]]>
    </sql>    

    </sqlQuery>

    <sqlQuery name="RelVisitOntology_maled">
     <column name="ontology_term_name"/>
     <column name="parent_ontology_term_name"/>
     <column name="display_name"/>
     <column name="description"/>
     <column name="type"/>
     <column name="units"/>
     <column name="precision"/>
     <column name="is_range"/>
    <sql>
         <![CDATA[
select * from (
with leaf as ( select o.ontology_term_source_id as ontology_term_name, o.parent_ontology_term_source_id as parent_ontology_term_name, nvl(o.display_name,o.ontology_term_name) as display_name, o.description, o.units,o.type,o.is_range,o.precision
from apidbtuning.metadataontology o, 
(select distinct term
 from apidbtuning.metadata
 where dataset_name = 'ISASimple_Gates_MAL-ED_stdm_tp_RSRC' --$$dataset$$
 and category = 'Event'
 and source_id != 'EUPATH_0000094') md
 where o.ontology_term_name = md.term),
first as (
 select o.ontology_term_source_id as ontology_term_name, o.parent_ontology_term_source_id as parent_ontology_term_name, nvl(o.display_name,o.ontology_term_name) as display_name, o.description, o.units,o.type,o.is_range,o.precision
 from apidbtuning.metadataontology o, (select distinct parent_ontology_term_name from leaf where parent_ontology_term_name is not null) par
 where o.ontology_term_source_id = par.parent_ontology_term_name),
 second as (
 select o.ontology_term_source_id as ontology_term_name, o.parent_ontology_term_source_id as parent_ontology_term_name, nvl(o.display_name,o.ontology_term_name) as display_name, o.description, o.units,o.type,o.is_range,o.precision
 from apidbtuning.metadataontology o, (select distinct parent_ontology_term_name from first where parent_ontology_term_name is not null) gpar
 where o.ontology_term_source_id = gpar.parent_ontology_term_name)
 select * from leaf
 union
 select * from first
 union
 select * from second
 union
 select o.ontology_term_source_id as ontology_term_name, o.parent_ontology_term_source_id as parent_ontology_term_name, nvl(o.display_name,o.ontology_term_name) as display_name, o.description, o.units,o.type,o.is_range,o.precision
 from apidbtuning.metadataontology o, (select distinct parent_ontology_term_name from second where parent_ontology_term_name is not null) ggpar
 where o.ontology_term_source_id = ggpar.parent_ontology_term_name
 ) order by ontology_term_name
         ]]>
    </sql>
   </sqlQuery>

   <sqlQuery name="RelVisitMetaData_maled">
      <column name="ontology_term_name"/>
      <column name="internal"/>
      <column name="number_value"/>
      <column name="date_value"/>
      <column name="string_value"/>
      <sql>
        <![CDATA[
                select distinct protocol_app_node_id as internal, source_id as ontology_term_name,
                       string_value, number_value, date_value
                from ApidbTuning.MetaDataWithoutNulls 
                where dataset_name = 'ISASimple_Gates_MAL-ED_stdm_tp_RSRC' --$$dataset$$
                and category = 'Event'
          ]]>
    </sql>
    </sqlQuery>
   
  </querySet>    

</wdkModel>

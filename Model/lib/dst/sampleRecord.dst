[templateStart]
name=sampleRecord
anchorFile=ClinEpiModel/Model/lib/wdk/model/records/sampleRecord.xml
prop=datasetName
prop=studyAbbreviation
prop=sampleRecordOverview
prop=sampleRecordAttributesListFull
prop=sampleSourceIdsExcludedFromSampleAttributes
prop=tblPrefix
prop=paramSuffix
prop=presenterId
prop=includeProjects


>templateTextStart<

        <recordClassSet name="${presenterId}SampleRecordClasses" includeProjects="${includeProjects}">

                <recordClass name="${presenterId}SampleRecordClass"
                             urlName="${presenterId}_sample"
                             shortDisplayName="Sample"
                             displayName="${studyAbbreviation} Sample"
                             iconName="ebrc-sampleDetails_light"
                             allRecordsQueryRef="${presenterId}SampleAttributes.AllSamples"
                             includeProjects="${includeProjects}">


            <!-- primary key definition -->
            <primaryKey aliasQueryRef="${presenterId}SampleAttributes.SampleAlias">
              <columnRef>source_id</columnRef>
              <columnRef>project_id</columnRef>
            </primaryKey>

            <idAttribute name="primary_key" displayName="Sample Id">
                <text>
                    <![CDATA[
                      $$source_id$$
                    ]]>
                </text>
            </idAttribute>

           ${sampleRecordAttributesListFull}

        <!-- =============================================================== -->
      <!--  Step Analysis Plugins -->
      <!-- =============================================================== -->


      <stepAnalysisRef name="clinepi-event-dist">
        <property name="datasetTblPrefix">${tblPrefix}</property>
        <property name="datasetName">${datasetName}</property>
      </stepAnalysisRef>
      <stepAnalysisRef name="clinepi-cont-table">
        <property name="datasetTblPrefix">${tblPrefix}</property>
        <property name="datasetName">${datasetName}</property>
      </stepAnalysisRef>
      <stepAnalysisRef name="clinepi-summaries">
        <property name="datasetTblPrefix">${tblPrefix}</property>
        <property name="datasetName">${datasetName}</property>
      </stepAnalysisRef>

 <!-- =============================================================== -->
      <!--   Reporters -->
      <!-- =============================================================== -->

      <reporter name="attributesTabular" displayName="Tab- or comma-delimited (openable in Excel)- choose columns to make a custom table" scopes="results"  
      		implementation="org.gusdb.wdk.model.report.reporter.AttributesTabularReporter">
        <property name="page_size">500</property>
      </reporter>



      <reporter name="tableTabular" displayName="Tab- or comma-delimited (openable in Excel)- Household Observations" scopes="results"
                implementation="org.gusdb.wdk.model.report.reporter.TableTabularReporter">
              <!-- huge page size to force no paging  -->
              <property name="page_size">1000000</property>
          </reporter>


      <reporter name="fullRecord" displayName="%%fullReporterDisplayName%%" scopes=""
                implementation="org.gusdb.wdk.model.report.reporter.FullRecordReporter" />

      <!-- =================================================================== -->
      <!--  Text Attributes   -->
      <!-- =================================================================== -->

     <textAttribute name="record_overview" displayName="Overview">
     		    <text>
			     <![CDATA[
              		     ${sampleRecordOverview}
                  ]]>	     
             </text>	     
	    </textAttribute>   

      <!-- =================================================================== -->
      <!--  AttributeQueryRef   -->
      <!-- =================================================================== -->

      <attributeQueryRef ref="${presenterId}SampleAttributes.SampleAttributes" attributeMetaQueryRef="${presenterId}SampleAttributes.SampleAttributesMeta"/>
      
      <attributeQueryRef ref="${presenterId}SampleAttributes.ObservationAttributes" attributeMetaQueryRef="${presenterId}SampleAttributes.ObservationAttributesMeta"/>

      <attributeQueryRef ref="${presenterId}SampleAttributes.ParticipantAttributes" attributeMetaQueryRef="${presenterId}SampleAttributes.ParticipantAttributesMeta"/>

      <attributeQueryRef ref="${presenterId}SampleAttributes.HouseholdAttributes" attributeMetaQueryRef="${presenterId}SampleAttributes.HouseholdAttributesMeta"/>


        <table name="Characteristics"
               displayName="Sample Characteristics"
               queryRef="${presenterId}SampleTables.Characteristics">
            <columnAttribute name="source_id"  inReportMaker="false" internal="true"/>
            <columnAttribute name="project_id"  inReportMaker="false" internal="true"/>
            <columnAttribute name="display_name" displayName="Value"/>
            <columnAttribute name="parent_source_id" displayName="Category"/>
            <columnAttribute name="unique_id" displayName="unique_id"/>
            <columnAttribute name="is_leaf" displayName="is_leaf"/>
            <propertyList name="tableIsTree"><value>true</value></propertyList>
        </table>



           <table name="HouseholdObservationDownload"
                 displayName="Household Observations"
                 queryRef="${presenterId}SampleTables.HouseholdObservationDownload"
                 attributeMetaQueryRef="${presenterId}SampleTables.HouseholdObservationDownloadColumnAttributes">
            <columnAttribute name="source_id" internal="true" inReportMaker="false"/>
            <columnAttribute name="project_id" internal="true" inReportMaker="false"/>
            <columnAttribute name="Household_Id"/>
          </table>


    </recordClass>
    </recordClassSet>

>templateTextEnd<


[templateStart]
name=sampleRecordAttributeQueries
anchorFile=ClinEpiModel/Model/lib/wdk/model/records/sampleRecord.xml
prop=datasetName
prop=sampleRecordAttributesListFull
prop=sampleMultiFilterIdsQuoted
prop=sampleSourceIdsExcludedFromSampleAttributesQuote
prop=sampleSourceIdsExcludedFromSampleAttributes
prop=observationMultiFilterIdsQuoted
prop=participantMultiFilterIdsQuoted
prop=participantSourceIdsExcludedFromParticipantAttributesQuote
prop=studyType
prop=tblPrefix
prop=paramSuffix
prop=presenterId
prop=includeProjects



>templateTextStart<
    <querySet name="${presenterId}SampleAttributes" queryType="attribute" doNotTest="true" includeProjects="${includeProjects}"
              isCacheable='false'
              >

      <testRowCountSql>
select count(*) from apidbtuning.${tblPrefix}Samples
       </testRowCountSql>


       <sqlQuery name="AllSamples" doNotTest="true">
         <column name="source_id"/>
         <column name="project_id"/>
         <sql>
             SELECT name as source_id, '@PROJECT_ID@' AS project_id FROM apidbtuning.${tblPrefix}Samples
         </sql>
       </sqlQuery>

       <sqlQuery name="SampleAlias" doNotTest="true">
         <column name="source_id"/>
         <column name="project_id"/>
         <column name="old_source_id"/>
         <column name="old_project_id"/>
         <sql>
	 SELECT name as source_id, '@PROJECT_ID@' AS project_id, name as old_source_id, '@PROJECT_ID@' AS old_project_id 
	 FROM apidbtuning.${tblPrefix}Samples
         </sql>
       </sqlQuery>



     <sqlQuery name="SampleAttributes" attributeMetaQueryRef="${presenterId}SampleAttributes.SampleAttributesMeta">
         <column name="source_id"/>
         <column name="project_id"/>

          <sql>
            <![CDATA[
            select ss.name as source_id, '@PROJECT_ID@' as project_id, ss.*
                     from apidbtuning.${tblPrefix}Samples ss
            ]]>
          </sql>
        </sqlQuery>


<sqlQuery name="SampleAttributesMeta" isCacheable="false">
          <column name="name" />
          <column name="display_name" />
          <column name="help" />
          <column name="reporter_name" />
          <column name="reporter_display" />
          <column name="reporter_description" />
          <column name="reporter_implementation" />
          <column name="reporter_properties" />

           <sql>
            <![CDATA[

select * from (
select distinct CASE WHEN meta.parent_type = 'multifilter' or meta.parent_name in (${sampleMultiFilterIdsQuoted}) THEN meta.parent_display_name || ' >> ' || meta.display_name ELSE meta.display_name END as display_name, 
meta.name, meta.help,
                   decode(meta.type, 'string', 'histogram', 'number', 'histogram', null) as reporter_name,
                   decode(meta.type, 'string', 'Histogram', 'number', 'Histogram', null) as reporter_display,
                   decode(meta.type, 'string', 'Display a histogram of the values', 'number', 'Display a histogram of the values',null) as reporter_description,
                   decode(meta.type, 'string', 'org.gusdb.wdk.model.report.reporter.HistogramAttributeReporter', 'number','org.gusdb.wdk.model.report.reporter.HistogramAttributeReporter', null) as reporter_implementation,
                            null as reporter_properties
from (
    select o.display_name, m.ontology_term_name as name, o.description as help, o.type, p.ontology_term_source_id as parent_name, p.display_name as parent_display_name, p.type as parent_type 
from ApidbTuning.${tblPrefix}SampleMD m, ApidbTuning.${tblPrefix}Ontology o, ApidbTuning.${tblPrefix}Ontology p 
where  m.Ontology_Term_Name = O.Ontology_Term_Source_Id
and m.ontology_term_name not in (${sampleSourceIdsExcludedFromSampleAttributesQuote})
and o.parent_ontology_term_source_id = p.ontology_term_source_id(+)
group by m.ontology_term_name, o.type, o.description, o.display_name,p.ontology_term_source_id,p.display_name,p.type
) meta
)order by display_name

  ]]>

                </sql>
         </sqlQuery>



<sqlQuery name="ObservationAttributes" attributeMetaQueryRef="${presenterId}SampleAttributes.ObservationAttributesMeta">
         <column name="source_id"/>
         <column name="project_id"/>
          <sql>
            <![CDATA[
select ss.name as source_id, '@PROJECT_ID@' as project_id, ob.*
from APIDBTUNING.${tblPrefix}Samples ss, APIDBTUNING.${tblPrefix}Observations ob , Apidbtuning.${tblPrefix}PANIO io
where  ss.PAN_ID = io.OUTPUT_PAN_ID
and io.INPUT_PAN_ID = ob.PAN_ID
            ]]>
            </sql>

        </sqlQuery>



<sqlQuery name="ObservationAttributesMeta" isCacheable="false">
           <column name="name" />
           <column name="display_name" />
	   <column name="help" />
           <column name="reporter_name" />
           <column name="reporter_display" />
           <column name="reporter_description" />
           <column name="reporter_implementation" />
           <column name="reporter_properties" />

           <sql>
            <![CDATA[

select * from (
select CASE WHEN meta.parent_type = 'multifilter' or meta.parent_name in (${observationMultiFilterIdsQuoted}) THEN meta.parent_display_name || ' >> ' || meta.display_name ELSE meta.display_name END as display_name,
meta.name, meta.help,
                   decode(meta.type, 'string', 'histogram', 'number', 'histogram', null) as reporter_name,
                   decode(meta.type, 'string', 'Histogram', 'number', 'Histogram', null) as reporter_display,
                   decode(meta.type, 'string', 'Display a histogram of the values', 'number', 'Display a histogram of the values',null) as reporter_description,
                   decode(meta.type, 'string', 'org.gusdb.wdk.model.report.reporter.HistogramAttributeReporter', 'number','org.gusdb.wdk.model.report.reporter.HistogramAttributeReporter', null) as reporter_implementation,
                    null as reporter_properties
from(
    select o.display_name, m.ontology_term_name as name, o.description as help, o.type, p.ontology_term_source_id as parent_name, p.display_name as parent_display_name, p.type as parent_type
from ApidbTuning.${tblPrefix}ObservationMD m, ApidbTuning.${tblPrefix}Ontology o, ApidbTuning.${tblPrefix}Ontology p
where 
 
 m.Ontology_Term_Name = O.Ontology_Term_Source_Id
and m.observation_id = m.sample_id
and o.parent_ontology_term_source_id = p.ontology_term_source_id(+)
group by m.ontology_term_name, o.type, o.description, o.display_name,p.ontology_term_source_id,p.display_name,p.type
                            )meta
)order by display_name


      ]]>
              </sql>

           </sqlQuery>





<sqlQuery name="ParticipantAttributes" attributeMetaQueryRef="${presenterId}SampleAttributes.ParticipantAttributesMeta">
         <column name="source_id"/>
         <column name="project_id"/>
          <sql>
            <![CDATA[
select ss.name as source_id, '@PROJECT_ID@' as project_id, pa.*
from APIDBTUNING.${tblPrefix}Samples ss, APIDBTUNING.${tblPrefix}Observations ob ,APIDBTUNING.${tblPrefix}Participants pa , Apidbtuning.${tblPrefix}PANIO io, Apidbtuning.${tblPrefix}PANIO io2
    where  ss.PAN_ID = io.OUTPUT_PAN_ID
    and io.INPUT_PAN_ID = ob.PAN_ID
    and ob.PAN_ID = io2.OUTPUT_PAN_ID
    and io2.INPUT_PAN_ID = pa.PAN_ID

            ]]>
            </sql>
        </sqlQuery>


<sqlQuery name="ParticipantAttributesMeta" isCacheable="false">
           <column name="name" />
           <column name="display_name" />
	      <column name="help" />
           <column name="reporter_name" />
           <column name="reporter_display" />
           <column name="reporter_description" />
           <column name="reporter_implementation" />
           <column name="reporter_properties" />

           <sql>
            <![CDATA[


select * from (
select distinct CASE WHEN meta.parent_type = 'multifilter' or meta.parent_name in (${participantMultiFilterIdsQuoted}) THEN meta.parent_display_name || ' >> ' || meta.display_name ELSE meta.display_name END as display_name, 
meta.name, meta.help,
                   decode(meta.type, 'string', 'histogram', 'number', 'histogram', null) as reporter_name,
                   decode(meta.type, 'string', 'Histogram', 'number', 'Histogram', null) as reporter_display,
                   decode(meta.type, 'string', 'Display a histogram of the values', 'number', 'Display a histogram of the values',null) as reporter_description,
                   decode(meta.type, 'string', 'org.gusdb.wdk.model.report.reporter.HistogramAttributeReporter', 'number','org.gusdb.wdk.model.report.reporter.HistogramAttributeReporter', null) as reporter_implementation,
                            null as reporter_properties
from (
    select o.display_name, m.ontology_term_name as name, o.description as help, o.type, p.ontology_term_source_id as parent_name, p.display_name as parent_display_name, p.type as parent_type 
from ApidbTuning.${tblPrefix}ParticipantMD m, ApidbTuning.${tblPrefix}Ontology o, ApidbTuning.${tblPrefix}Ontology p 
where  m.Ontology_Term_Name = O.Ontology_Term_Source_Id
and m.ontology_term_name not in (${participantSourceIdsExcludedFromParticipantAttributesQuote})
and o.parent_ontology_term_source_id = p.ontology_term_source_id(+)
group by m.ontology_term_name, o.type, o.description, o.display_name,p.ontology_term_source_id,p.display_name,p.type
) meta
)order by display_name

      ]]>
              </sql>
           </sqlQuery>


<sqlQuery name="HouseholdAttributes" attributeMetaQueryRef="${presenterId}SampleAttributes.HouseholdAttributesMeta">
         <column name="source_id"/>
         <column name="project_id"/>
          <sql>
            <![CDATA[
select ss.name as source_id, '@PROJECT_ID@' as project_id, hh.*
from APIDBTUNING.${tblPrefix}Samples ss, APIDBTUNING.${tblPrefix}Observations ob ,APIDBTUNING.${tblPrefix}Participants pa , 
     APIDBTUNING.${tblPrefix}Households hh,
     Apidbtuning.${tblPrefix}PANIO io, Apidbtuning.${tblPrefix}PANIO io2, Apidbtuning.${tblPrefix}PANIO io3
    where  ss.PAN_ID = io.OUTPUT_PAN_ID
    and io.INPUT_PAN_ID = ob.PAN_ID
    and ob.PAN_ID = io2.OUTPUT_PAN_ID
    and io2.INPUT_PAN_ID = pa.PAN_ID
    and pa.PAN_ID = io3.OUTPUT_PAN_ID
    and io3.INPUT_PAN_ID = hh.PAN_ID

            ]]>
            </sql>
        </sqlQuery>


<sqlQuery name="HouseholdAttributesMeta" isCacheable="false">
           <column name="name" />
           <column name="display_name" />
	      <column name="help" />
           <column name="reporter_name" />
           <column name="reporter_display" />
           <column name="reporter_description" />
           <column name="reporter_implementation" />
           <column name="reporter_properties" />

           <sql>
            <![CDATA[
select meta.display_name, meta.name, meta.help,
        decode(meta.type, 'string', 'histogram', 'number', 'histogram', null) as reporter_name,
        decode(meta.type, 'string', 'Histogram', 'number', 'Histogram', null) as reporter_display,
        decode(meta.type, 'string', 'Display a histogram of the values', 'number', 'Display a histogram of the values', null) as reporter_description,
        decode(meta.type, 'string', 'org.gusdb.wdk.model.report.reporter.HistogramAttributeReporter', 'number','org.gusdb.wdk.model.report.reporter.HistogramAttributeReporter', null) as reporter_implementation,  null as reporter_properties
from (
select distinct o.display_name as display_name, o.ontology_term_source_id as name, o.description as help, o.type
        from ALL_TAB_COLUMNS c, all_synonyms s, ApidbTuning.${tblPrefix}Ontology o
            where s.synonym_name = upper('${tblPrefix}Households')
                and c.owner = 'APIDBTUNING'
                and c.table_name = s.table_name
                and upper(o.ontology_term_source_id) = c.column_name
          ) meta
      ]]>
              </sql>
           </sqlQuery>






      </querySet>
>templateTextEnd<


[templateStart]
name=sampleRecordTableQueries
anchorFile=ClinEpiModel/Model/lib/wdk/model/records/sampleRecord.xml
prop=datasetName
prop=sampleRecordAttributesListFull
prop=sampleSourceIdsExcludedFromSampleAttributesQuote
prop=sampleSourceIdsExcludedFromSampleAttributes
prop=tblPrefix
prop=paramSuffix
prop=presenterId
prop=includeProjects

>templateTextStart<
    <querySet name="${presenterId}SampleTables" queryType="table"  includeProjects="${includeProjects}"
              isCacheable='false'>


      <sqlQuery name="Characteristics"  isCacheable='false'>
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="display_name"/>
            <column name="parent_source_id"/>
            <column name="unique_id"/>
            <column name="is_leaf"/>
         <sqlParamValue name="datasetName"><![CDATA[${datasetName}]]></sqlParamValue>
            <sql>
            <![CDATA[

SELECT pan_name  AS source_id,
  '@PROJECT_ID@' AS project_id,
  nvl(property_source_id, 'root')      AS parent_source_id,
  pan_id ||'_'||property_id ||'_'||string_value as unique_id,
  string_value   AS display_name,
  1 as is_leaf
FROM apidbtuning.${tblPrefix}metadata
WHERE dataset_name = '&&datasetName&&'
AND category  in ('Sample')
UNION
SELECT a.name                AS source_id,
  '@PROJECT_ID@'              AS project_id,
  nvl(o.PARENT_ONTOLOGY_TERM_SOURCE_ID, 'root') AS parent_source_id,
  o.ONTOLOGY_TERM_SOURCE_ID AS unique_id,
  ontology_term_name          AS display_name,
  0 as is_leaf
FROM apidbtuning.${tblPrefix}Ontology o,
  apidbtuning.${tblPrefix}Samples a
WHERE o.dataset_name = '&&datasetName&&'
            ]]>
            </sql>
       </sqlQuery>



	<sqlQuery name="HouseholdObservationDownloadColumnAttributes"  isCacheable='false'>
          <column name="name" />
          <column name="display_name" />

          <sql>
            <![CDATA[
            select distinct o.display_name as display_name, o.ontology_term_source_id as name
            from ALL_TAB_COLUMNS c, all_synonyms s, ApidbTuning.${tblPrefix}Ontology o
            where s.synonym_name = upper('${tblPrefix}Households')
            and c.owner = 'APIDBTUNING'
            and c.table_name = s.table_name
            and upper(o.ontology_term_source_id) = c.column_name
            ]]>
          </sql>
        </sqlQuery>


	 <sqlQuery name="HouseholdObservationDownload"  isCacheable='false' attributeMetaQueryRef="${presenterId}SampleTables.HouseholdObservationDownloadColumnAttributes">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="name"/>
	    <column name="Household_Id"/>
            <sql>
            <![CDATA[
with HHob as(
        select *
        from apidbtuning.${tblPrefix}PANIO
        where input_pan_type_source_id = 'PCO_0000024'
        and output_pan_type_source_id = 'PCO_0000024'
    )
select ss.name as source_id, '@PROJECT_ID@' as project_id, hh.name as Household_Id, hh.*
    from apidbtuning.${tblPrefix}Households hh, HHob, apidbtuning.${tblPrefix}Samples ss
    where  hh.pan_id =  HHob.output_pan_id
            ]]>

            </sql>
        </sqlQuery>



  </querySet>

>templateTextEnd<


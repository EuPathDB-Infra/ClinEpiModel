[templateStart] 
name=observationRecord
anchorFile=ClinEpiModel/Model/lib/wdk/model/records/observationRecord.xml
prop=datasetName
prop=studyAbbreviation
prop=observationRecordOverview
prop=observationRecordAttributesListFull
prop=tblPrefix
prop=paramSuffix
prop=presenterId
prop=includeProjects
prop=observationRecordSamplesTable
prop=observationRecordMicrosTable

>templateTextStart<

    <recordClassSet name="${presenterId}ObservationRecordClasses" includeProjects="${includeProjects}">

      <recordClass name="${presenterId}ObservationRecordClass" urlName="${presenterId}_observation" shortDisplayName="Observation" displayName="${studyAbbreviation} Observation" iconName="fa fa-stethoscope" includeProjects="${includeProjects}"> 


            <!-- primary key definition -->
            <primaryKey aliasQueryRef="${presenterId}ObservationAttributes.VisitsAlias">
              <columnRef>source_id</columnRef>
              <columnRef>project_id</columnRef>
            </primaryKey>

            <idAttribute name="primary_key" displayName="Observation Id">
                <text>
                    <![CDATA[
                      $$source_id$$
                    ]]>
                </text>
            </idAttribute>

           ${observationRecordAttributesListFull}

        <!-- =============================================================== -->
      <!--  Step Analysis Plugins -->
      <!-- =============================================================== -->

<!--             <stepAnalysisRef name="clinical-visit-dist"/> -->

      <stepAnalysisRef name="clinepi-event-dist">
        <property name="datasetTblPrefix">${tblPrefix}</property>
        <property name="datasetName">${datasetName}</property>
      </stepAnalysisRef>
      <stepAnalysisRef name="clinepi-cont-table">
        <property name="datasetTblPrefix">${tblPrefix}</property>
        <property name="datasetName">${datasetName}</property>
      </stepAnalysisRef>
      <stepAnalysisRef name="clinepi-summaries">
        <property name="datasetTblPrefix">${tblPrefix}</property>
        <property name="datasetName">${datasetName}</property>
      </stepAnalysisRef>
     
 <!-- =============================================================== -->
      <!--   Reporters -->  
      <!-- =============================================================== -->



      <reporter name="attributesTabular" displayName="%%attributesReporterDisplayName%%" scopes="results"
                implementation="org.gusdb.wdk.model.report.reporter.AttributesTabularReporter">
        <property name="page_size">500</property>
      </reporter>



       <reporter name="tableTabular" displayName="Tab- or comma-delimited (openable in Excel) - Households and Samples" scopes="results"
                implementation="org.gusdb.wdk.model.report.reporter.TableTabularReporter">
              <!-- huge page size to force no paging  -->
              <property name="page_size">1000000</property>
       </reporter>



      <reporter name="fullRecord" displayName="%%fullReporterDisplayName%%" scopes=""
                implementation="org.gusdb.wdk.model.report.reporter.FullRecordReporter" />

      <!-- =================================================================== -->
      <!--  Text Attributes  ++++++++-->
      <!-- =================================================================== -->




 <textAttribute name="record_overview" displayName="Overview">
             <text>
                  <![CDATA[
                  ${observationRecordOverview}
                  ]]>
             </text>
          </textAttribute>

<!--
 <textAttribute name="record_overview" displayName="Overview">


             <text>
                  <![CDATA[

                  Visit from <i>$$EUPATH_0000091$$</i> for Participant <a href="@WEBAPP_BASE_URL@/record/${presenterId}_participant/$$parent_id$$/@PROJECT_ID@">$$parent_id$$</a>.
                  ]]>
             </text>
          </textAttribute>
-->

         <attributeQueryRef ref="${presenterId}ObservationAttributes.ObservationAttributes" attributeMetaQueryRef="${presenterId}ObservationAttributes.ObservationAttributesMeta"/>


         <attributeQueryRef ref="${presenterId}ObservationAttributes.ParticipantAttributes" attributeMetaQueryRef="${presenterId}ObservationAttributes.ParticipantAttributesMeta"/>

         <attributeQueryRef ref="${presenterId}ObservationAttributes.HouseholdAttributes" attributeMetaQueryRef="${presenterId}ObservationAttributes.HouseholdAttributesMeta"/>


        <table name="Characteristics"
               displayName="Clinical Observation Characteristics"
               queryRef="${presenterId}ObservationTables.Characteristics">
            <columnAttribute name="source_id"  inReportMaker="false" internal="true"/>
            <columnAttribute name="project_id"  inReportMaker="false" internal="true"/>
            <columnAttribute name="display_name" displayName="Value"/>
            <columnAttribute name="parent_source_id" displayName="Category"/>
            <columnAttribute name="unique_id" displayName="unique_id"/>
            <columnAttribute name="is_leaf" displayName="is_leaf"/>
            <propertyList name="tableIsTree"><value>true</value></propertyList>
        </table>


 <table name="SamplesDownload"
                 displayName="Samples"
                 queryRef="${presenterId}ObservationTables.SamplesDownload"
                 attributeMetaQueryRef="${presenterId}ObservationTables.SamplesDownloadColumnAttributes">
            <columnAttribute name="source_id" internal="true" inReportMaker="false"/>
            <columnAttribute name="project_id" internal="true" inReportMaker="false"/>
	    <columnAttribute name="Sample_Id"/>
	    <columnAttribute name="Participant_Id"/>
	    <columnAttribute name="Household_Id"/>
          </table>



 <table name="HouseholdsDownload"
                 displayName="Households"
                 queryRef="${presenterId}ObservationTables.HouseholdsDownload"
                 attributeMetaQueryRef="${presenterId}ObservationTables.HouseholdsDownloadColumnAttributes">
            <columnAttribute name="source_id" internal="true" inReportMaker="false"/>
            <columnAttribute name="project_id" internal="true" inReportMaker="false"/>
	    <columnAttribute name="Participant_Id"/>
	    <columnAttribute name="Household_Id"/>

          </table>


	${observationRecordSamplesTable}
	${observationRecordMicrosTable}


    </recordClass>
    </recordClassSet>
>templateTextEnd<



[templateStart]
name=observationRecordSamplesTable
anchorFile=ClinEpiModel/Model/lib/wdk/model/records/observationRecord.xml
prop=presenterId

>templateTextStart<
	<table name="Samples"
            displayName="Samples Collected During Observation"
	    queryRef="\${presenterId}ObservationTables.Samples"
	    attributeMetaQueryRef="\${presenterId}ObservationTables.SamplesColumnAttributes">
            <columnAttribute name="source_id" inReportMaker="false" internal="true"/>
            <columnAttribute name="project_id" inReportMaker="false" internal="true"/>
            <columnAttribute name="sample_id" displayName="Sample ID"/>
        </table>
>templateTextEnd<



[templateStart]
name=observationRecordMicrosTable
anchorFile=ClinEpiModel/Model/lib/wdk/model/records/observationRecord.xml
prop=presenterId

>templateTextStart<
        <table name="MicrosInObser"
               displayName="Stool Microbiology Test"
               queryRef="\${presenterId}ObservationTables.MicrosInObser">
               <columnAttribute name="source_id" inReportMaker="false" internal="true"/>
               <columnAttribute name="project_id" inReportMaker="false" internal="true"/>
               <columnAttribute name="sample_id" displayName="Sample ID"/>
               <columnAttribute name="property" displayName="Stool Microbiology Test"/>
               <columnAttribute name="string_value" displayName="Result"/>
               <columnAttribute name="property_source_id" inReportMaker="false" internal="true"/>

        </table>
>templateTextEnd<


[templateStart] 
name=observationRecordAttributeQueries
anchorFile=ClinEpiModel/Model/lib/wdk/model/records/observationRecord.xml
prop=datasetName
prop=observationRecordAttributesListFull
prop=householdMultiFilterIdsQuoted
prop=participantMultiFilterIdsQuoted
prop=observationMultiFilterIdsQuoted
prop=tblPrefix
prop=paramSuffix
prop=presenterId
prop=includeProjects

>templateTextStart<
    <querySet name="${presenterId}ObservationAttributes" queryType="attribute" doNotTest="true" includeProjects="${includeProjects}"  
              isCacheable='false'>


      <testRowCountSql>
select count(*) from apidbtuning.${tblPrefix}Observations
       </testRowCountSql>
       <sqlQuery name="VisitsAlias" doNotTest="true">
         <column name="source_id"/>
         <column name="project_id"/>
         <column name="old_source_id"/>
         <column name="old_project_id"/>
         <sql>
             SELECT name as source_id, '@PROJECT_ID@' AS project_id, name as old_source_id, '@PROJECT_ID@' AS old_project_id FROM apidbtuning.${tblPrefix}Observations
         </sql>
       </sqlQuery>



 <sqlQuery name="ObservationAttributes" attributeMetaQueryRef="${presenterId}ObservationAttributes.ObservationAttributesMeta">
         <column name="source_id"/>
         <column name="project_id"/>

          <sql>
            <![CDATA[
            select cv.name as source_id, '@PROJECT_ID@' as project_id, cv.*
                     from apidbtuning.${tblPrefix}Observations cv
            ]]>
          </sql>
        </sqlQuery>


<sqlQuery name="ObservationAttributesMeta" isCacheable="false">
          <column name="name" />
          <column name="display_name" />
          <column name="help" />
          <column name="reporter_name" />
          <column name="reporter_display" />
          <column name="reporter_description" />
          <column name="reporter_implementation" />
          <column name="reporter_properties" />


	   <sql>
            <![CDATA[
select * from (
select CASE WHEN meta.parent_type = 'multifilter' or meta.parent_name in (${observationMultiFilterIdsQuoted}) THEN meta.parent_display_name || ' >> ' || meta.display_name ELSE meta.display_name END as display_name, 
meta.name, meta.help,
                   decode(meta.type, 'string', 'histogram', 'number', 'histogram', null) as reporter_name,
                   decode(meta.type, 'string', 'Histogram', 'number', 'Histogram', null) as reporter_display,
                   decode(meta.type, 'string', 'Display a histogram of the values', 'number', 'Display a histogram of the values',null) as reporter_description,
                   decode(meta.type, 'string', 'org.gusdb.wdk.model.report.reporter.HistogramAttributeReporter', 'number','org.gusdb.wdk.model.report.reporter.HistogramAttributeReporter', null) as reporter_implementation,
                    null as reporter_properties
from(
    select o.display_name, m.ontology_term_name as name, o.description as help, o.type, p.ontology_term_source_id as parent_name, p.display_name as parent_display_name, p.type as parent_type 
from ApidbTuning.${tblPrefix}ObservationMD m, ApidbTuning.${tblPrefix}Ontology o, ApidbTuning.${tblPrefix}Ontology p 
where m.Ontology_Term_Name = O.Ontology_Term_Source_Id
and m.observation_id = m.sample_id
and o.parent_ontology_term_source_id = p.ontology_term_source_id(+)
group by m.ontology_term_name, o.type, o.description, o.display_name,p.ontology_term_source_id,p.display_name,p.type
                            )meta
)order by display_name
  ]]>

		</sql>
		</sqlQuery>



<sqlQuery name="ParticipantAttributes" attributeMetaQueryRef="${presenterId}ObservationAttributes.ParticipantAttributesMeta">
         <column name="source_id"/>
         <column name="project_id"/>
         <column name="participant_id"/>

          <sql>
            <![CDATA[

            select pa.name as participant_id, cv.name as source_id, '@PROJECT_ID@' as project_id, pa.*
            from apidbtuning.${tblPrefix}Participants pa,
             APIDBTUNING.${tblPrefix}Observations cv,
             apidbtuning.${tblPrefix}PANIO io

             where  cv.PAN_ID = io.OUTPUT_PAN_ID
             and io.INPUT_PAN_ID = pa.PAN_ID

            ]]>
          </sql>
         </sqlQuery>

<sqlQuery name="ParticipantAttributesMeta" isCacheable="false">
           <column name="name" />
           <column name="display_name" />
	   <column name="help" />
           <column name="reporter_name" />
           <column name="reporter_display" />
           <column name="reporter_description" />
           <column name="reporter_implementation" />
           <column name="reporter_properties" />

           <sql>
            <![CDATA[
select * from (
select distinct CASE WHEN meta.parent_type = 'multifilter' or meta.parent_name in (${participantMultiFilterIdsQuoted}) THEN meta.parent_display_name || ' >> ' || meta.display_name ELSE meta.display_name END as display_name, 
meta.name, meta.help,
                   decode(meta.type, 'string', 'histogram', 'number', 'histogram', null) as reporter_name,
                   decode(meta.type, 'string', 'Histogram', 'number', 'Histogram', null) as reporter_display,
                   decode(meta.type, 'string', 'Display a histogram of the values', 'number', 'Display a histogram of the values',null) as reporter_description,
                   decode(meta.type, 'string', 'org.gusdb.wdk.model.report.reporter.HistogramAttributeReporter', 'number','org.gusdb.wdk.model.report.reporter.HistogramAttributeReporter', null) as reporter_implementation,
                            null as reporter_properties
from (
    select o.display_name, m.ontology_term_name as name, o.description as help, o.type, p.ontology_term_source_id as parent_name, p.display_name as parent_display_name, p.type as parent_type 
from ApidbTuning.${tblPrefix}ParticipantMD m, ApidbTuning.${tblPrefix}Ontology o, ApidbTuning.${tblPrefix}Ontology p 
where  m.Ontology_Term_Name = O.Ontology_Term_Source_Id
and o.parent_ontology_term_source_id = p.ontology_term_source_id(+)
group by m.ontology_term_name, o.type, o.description, o.display_name,p.ontology_term_source_id,p.display_name,p.type
    ) meta
UNION
 select 'Participant ID' as display_name, 'participant_id' as name, '' as help, '' as reporter_name,
       '' as reporter_display, '' as reporter_description, '' as reporter_implementation, '' as reporter_properties from dual
)order by display_name

            ]]>
              </sql>

           </sqlQuery>


<sqlQuery name="HouseholdAttributes" attributeMetaQueryRef="${presenterId}ObservationAttributes.HouseholdAttributesMeta">
         <column name="source_id"/>
         <column name="project_id"/>
         <column name="household_id"/>
          <sql>
            <![CDATA[

        select hh.name as household_id, cv.name as source_id, '@PROJECT_ID@' as project_id, hh.*
        from apidbtuning.${tblPrefix}Households hh,
             APIDBTUNING.${tblPrefix}PARTICIPANTS pa,
	     APIDBTUNING.${tblPrefix}Observations cv,
             apidbtuning.${tblPrefix}PANIO io,
	     apidbtuning.${tblPrefix}PANIO io2

    where  cv.PAN_ID = io.OUTPUT_PAN_ID
              and io.INPUT_PAN_ID = pa.PAN_ID
	      and pa.PAN_ID = io2.OUTPUT_PAN_ID
	      and io2.INPUT_PAN_ID = hh.PAN_ID

            ]]>
            </sql>

        </sqlQuery>




<sqlQuery name="HouseholdAttributesMeta" isCacheable="false">
           <column name="name" />
           <column name="display_name" />
	   <column name="help" />
           <column name="reporter_name" />
           <column name="reporter_display" />
           <column name="reporter_description" />
           <column name="reporter_implementation" />
           <column name="reporter_properties" />

           <sql>
            <![CDATA[
select * from (
select CASE WHEN meta.parent_type = 'multifilter' or meta.parent_name in (${householdMultiFilterIdsQuoted}) THEN meta.parent_display_name || ' >> ' || meta.display_name ELSE meta.display_name END as display_name, 
meta.name, meta.help,
                   decode(meta.type, 'string', 'histogram', 'number', 'histogram', null) as reporter_name,
                   decode(meta.type, 'string', 'Histogram', 'number', 'Histogram', null) as reporter_display,
                   decode(meta.type, 'string', 'Display a histogram of the values', 'number', 'Display a histogram of the values',null) as reporter_description,
                   decode(meta.type, 'string', 'org.gusdb.wdk.model.report.reporter.HistogramAttributeReporter', 'number','org.gusdb.wdk.model.report.reporter.HistogramAttributeReporter', null) as reporter_implementation, null as reporter_properties
from ( 
select o.display_name, m.ontology_term_name as name, o.description as help, o.type, p.ontology_term_source_id as parent_name, p.display_name as parent_display_name, p.type as parent_type 
from ApidbTuning.${tblPrefix}HouseholdMD m, ApidbTuning.${tblPrefix}Ontology o, ApidbTuning.${tblPrefix}Ontology p  
where m.household_id = m.Household_Observation_Id
and m.Ontology_Term_Name = O.Ontology_Term_Source_Id
and o.parent_ontology_term_source_id = p.ontology_term_source_id(+)
group by m.ontology_term_name, o.type, o.description, o.display_name,p.ontology_term_source_id, p.display_name,p.type
UNION
select 'Household ID' as display_name, 'household_id' as name, '' as help, '' as type,
'' as parent_name, '' as parent_display_name, '' as parent_type from dual
where (select count(*) from apidbtuning.${tblPrefix}Households) >0	
) meta
)order by display_name
            ]]>
              </sql>

           </sqlQuery>




      </querySet>

>templateTextEnd<



[templateStart] 
name=observationRecordTableQueries
anchorFile=ClinEpiModel/Model/lib/wdk/model/records/observationRecord.xml
prop=datasetName
prop=observationRecordAttributesListFull
prop=tblPrefix
prop=paramSuffix
prop=presenterId
prop=includeProjects
prop=observationRecordSamplesMetaTableQuery
prop=observationRecordSamplesTableQuery
prop=observationRecordMicrosTableQuery

>templateTextStart<
    <querySet name="${presenterId}ObservationTables" queryType="table"  includeProjects="${includeProjects}"
              isCacheable='false'>


      <sqlQuery name="Characteristics"  isCacheable='false'>
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="display_name"/>
            <column name="parent_source_id"/>
            <column name="unique_id"/>
            <column name="is_leaf"/>
         <sqlParamValue name="datasetName"><![CDATA[${datasetName}]]></sqlParamValue>
            <sql>
            <![CDATA[
SELECT pan_name  AS source_id,
  '@PROJECT_ID@' AS project_id,
  nvl(property_source_id, 'root')      AS parent_source_id,
  pan_id ||'_'||property_id ||'_'||string_value as unique_id,
  string_value   AS display_name,
  1 as is_leaf
FROM apidbtuning.${tblPrefix}metadata
WHERE dataset_name = '&&datasetName&&'
AND category       in ('Visit','Event', 'Event/Observation', 'Observation')
UNION
SELECT a.name                AS source_id,
  '@PROJECT_ID@'              AS project_id,
  nvl(o.PARENT_ONTOLOGY_TERM_SOURCE_ID, 'root') AS parent_source_id,
  o.ONTOLOGY_TERM_SOURCE_ID AS unique_id,
  ontology_term_name          AS display_name,
  0 as is_leaf
FROM apidbtuning.${tblPrefix}Ontology o,
  apidbtuning.${tblPrefix}Observations a
WHERE o.dataset_name = '&&datasetName&&'
            ]]>
            </sql>
       </sqlQuery>

       ${observationRecordSamplesMetaTableQuery}

       ${observationRecordSamplesTableQuery}


<sqlQuery name="SamplesDownloadColumnAttributes"  isCacheable='false'>
          <column name="name" />
          <column name="display_name" />

          <sql>
            <![CDATA[
            select distinct o.display_name as display_name, o.ontology_term_source_id as name
            from ALL_TAB_COLUMNS c, all_synonyms s, ApidbTuning.${tblPrefix}Ontology o
            where s.synonym_name = upper('${tblPrefix}SAMPLES')
            and c.owner = 'APIDBTUNING'
            and c.table_name = s.table_name
            and upper(o.ontology_term_source_id) = c.column_name
            ]]>
          </sql>
        </sqlQuery>



 <sqlQuery name="SamplesDownload"  isCacheable='false' attributeMetaQueryRef="${presenterId}ObservationTables.SamplesDownloadColumnAttributes">
            <column name="source_id"/>
            <column name="project_id"/>
	    <column name="Sample_Id"/>
            <column name="Participant_Id"/>
            <column name="Household_Id"/>
            <sql>
            <![CDATA[
select cv.name as source_id, '@PROJECT_ID@' as project_id, sp.name as Sample_Id, pa.name as Participant_Id, '' as Household_Id, sp.*
from  apidbtuning.${tblPrefix}Participants pa
              ,apidbtuning.${tblPrefix}Observations cv
              ,apidbtuning.${tblPrefix}Samples sp
              ,apidbtuning.${tblPrefix}PANIO io
              ,apidbtuning.${tblPrefix}PANIO io2
              ,dual
             where sp.PAN_ID = io.OUTPUT_PAN_ID
              and io.INPUT_PAN_ID = cv.PAN_ID
              and cv.PAN_ID = io2.OUTPUT_PAN_ID
              and io2.INPUT_PAN_ID = pa.PAN_ID
              and (select count(*) from apidbtuning.${tblPrefix}Households) = 0

UNION

select cv.name as source_id, '@PROJECT_ID@' as project_id, sp.name as Sample_Id, pa.name as Participant_Id, hh.name as Household_Id, sp.*
from apidbtuning.${tblPrefix}Households hh
              ,apidbtuning.${tblPrefix}Participants pa
              ,apidbtuning.${tblPrefix}Observations cv
              ,apidbtuning.${tblPrefix}Samples sp
              ,apidbtuning.${tblPrefix}PANIO io
              ,apidbtuning.${tblPrefix}PANIO io2
              ,apidbtuning.${tblPrefix}PANIO io3
             where sp.PAN_ID = io.OUTPUT_PAN_ID
              and io.INPUT_PAN_ID = cv.PAN_ID
              and cv.PAN_ID = io2.OUTPUT_PAN_ID
              and io2.INPUT_PAN_ID = pa.PAN_ID
              and pa.PAN_ID = io3.OUTPUT_PAN_ID
              and io3.INPUT_PAN_ID = hh.PAN_ID
              and (select count(*) from apidbtuning.${tblPrefix}Households) > 0

            ]]>
            </sql>
        </sqlQuery>



<sqlQuery name="HouseholdsDownloadColumnAttributes"  isCacheable='false'>
          <column name="name" />
          <column name="display_name" />

          <sql>
            <![CDATA[
            select distinct o.display_name as display_name, o.ontology_term_source_id as name
            from ALL_TAB_COLUMNS c, all_synonyms s, ApidbTuning.${tblPrefix}Ontology o
            where s.synonym_name = upper('${tblPrefix}Households')
            and c.owner = 'APIDBTUNING'
            and c.table_name = s.table_name
            and upper(o.ontology_term_source_id) = c.column_name
            ]]>
          </sql>
        </sqlQuery>



 <sqlQuery name="HouseholdsDownload"  isCacheable='false' attributeMetaQueryRef="${presenterId}ObservationTables.HouseholdsDownloadColumnAttributes">
            <column name="source_id"/>
            <column name="project_id"/>
	    <column name="Participant_Id"/>
	    <column name="Household_Id"/>
            <sql>
            <![CDATA[

 with HHob as(
        select *
        from apidbtuning.${tblPrefix}PANIO
        where input_pan_type_source_id = 'PCO_0000024'
        and output_pan_type_source_id = 'PCO_0000024'
    )
 select ob.name as source_id, '@PROJECT_ID@' as project_id, hh.name as Household_Id, pa.name as Participant_Id, hh.*
              from apidbtuning.${tblPrefix}Observations ob,
                apidbtuning.${tblPrefix}Participants pa,
                apidbtuning.${tblPrefix}Households hh,
                apidbtuning.${tblPrefix}PANIO io,
                apidbtuning.${tblPrefix}PANIO io2
              where ob.PAN_ID = io.OUTPUT_PAN_ID
              and io.INPUT_PAN_ID = pa.PAN_ID
              and pa.PAN_ID = io2.OUTPUT_PAN_ID
              and io2.INPUT_PAN_ID = hh.PAN_ID
              and (select count(*) from apidbtuning.${tblPrefix}Households) >0
              
UNION

select ob.name as source_id, '@PROJECT_ID@' as project_id, hh.name as Household_Id, pa.name as Participant_Id, hh.*
              from apidbtuning.${tblPrefix}Observations ob,
                apidbtuning.${tblPrefix}Participants pa,
                apidbtuning.${tblPrefix}Households hh,
                apidbtuning.${tblPrefix}PANIO io,
                apidbtuning.${tblPrefix}PANIO io2,
                HHob
            where hh.pan_id =  HHob.output_pan_id
            and ob.PAN_ID = io.OUTPUT_PAN_ID
            and io.INPUT_PAN_ID = pa.PAN_ID
            and pa.pan_id = io2.output_pan_id
            and io2.input_pan_id  = HHob.input_pan_id
            and (select count(*) from HHob) >0


            ]]>
            </sql>
        </sqlQuery>

	 

	 ${observationRecordMicrosTableQuery}

    </querySet>

>templateTextEnd<



[templateStart]
name=observationRecordSamplesTableQuery
anchorFile=ClinEpiModel/Model/lib/wdk/model/records/observationRecord.xml
prop=sampleSourceIdsForParticipantsSamplesTable
prop=sampleSourceIdsToOrderParticipantsSamplesTable

prop=tblPrefix
prop=paramSuffix
prop=presenterId

>templateTextStart<
 <sqlQuery name="Samples"  isCacheable='false'  
 	   attributeMetaQueryRef="\${presenterId}ObservationTables.SamplesColumnAttributes">

            <column name="source_id"/>
            <column name="project_id"/>
            <column name="sample_id"/>

            <sqlParamValue name="sampleSourceIds"><![CDATA[\${sampleSourceIdsForParticipantsSamplesTable}]]></sqlParamValue>
            <sqlParamValue name="orderBy"><![CDATA[\${sampleSourceIdsToOrderParticipantsSamplesTable}]]></sqlParamValue>

            <sql>

                 <![CDATA[
select cv.name as source_id,
        '@PROJECT_ID@' as project_id, sa.&&sampleSourceIds&&, sa.name as sample_id   
              from apidbtuning.\${tblPrefix}Observations cv
              , apidbtuning.\${tblPrefix}samples sa
              , apidbtuning.\${tblPrefix}PANIO io
              where sa.PAN_ID = io.OUTPUT_PAN_ID
              and io.INPUT_PAN_ID = cv.PAN_ID
              order by &&orderBy&&
		
                  ]]>
            </sql>
        </sqlQuery>
>templateTextEnd<




[templateStart]
name=observationRecordSamplesMetaTableQuery
anchorFile=ClinEpiModel/Model/lib/wdk/model/records/observationRecord.xml
prop=sampleSourceIdsForParticipantsSamplesTableSubquery
prop=tblPrefix
prop=paramSuffix

>templateTextStart<
      <sqlQuery name="SamplesColumnAttributes"  isCacheable='false'>
          <column name="name" />
          <column name="display_name" />

          <sql>
            <![CDATA[
                     select pt.property_source_id as name
                          , pt.property as display_name
                     from apidbtuning.\${tblPrefix}PropertyType pt, \${sampleSourceIdsForParticipantsSamplesTableSubquery} ids
                     where pt.property_source_id = ids.property_source_id
                     order by ids.order_num
            ]]>
          </sql>
        </sqlQuery>
>templateTextEnd<




[templateStart] 
name=observationRecordMicrosTableQuery
anchorFile=ClinEpiModel/Model/lib/wdk/model/records/observationRecord.xml
prop=tblPrefix
prop=paramSuffix
prop=presenterId
prop=microSourceIdsForObservationsMicrosQuote

>templateTextStart<
      <sqlQuery name="MicrosInObser"  isCacheable='false'>
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="sample_id"/>
            <column name="property"/>
            <column name="string_value"/>
	    <column name="property_source_id"/>

	    
	   <sqlParamValue name="microSourceIds"><![CDATA[\${microSourceIdsForObservationsMicrosQuote}]]></sqlParamValue>

            <sql>
                 <![CDATA[

with microtest as(
    SELECT ONTOLOGY_TERM_NAME,ONTOLOGY_TERM_SOURCE_ID, CONNECT_BY_ISLEAF  as "isleaf"
    FROM  APIDBTUNING.\${tblPrefix}ONTOLOGY                                                                               
    WHERE CONNECT_BY_ISLEAF=1                                                                                           
    start with ONTOLOGY_TERM_SOURCE_ID in (&&microSourceIds&&)                                                         
    connect by prior ONTOLOGY_TERM_SOURCE_ID=PARENT_ONTOLOGY_TERM_SOURCE_ID
)
SELECT  ob.name as source_id, me.pan_name as sample_id, me.property, me.string_value, me.property_source_id,
	'@PROJECT_ID@' as project_id
FROM (SELECT pan_id, name FROM apidbtuning.\${tblPrefix}Observations) ob,
     apidbtuning.\${tblPrefix}panio io,
     apidbtuning.\${tblPrefix}metadata me,
     microtest                                                                                                                     
WHERE me.property_source_id=microtest.ONTOLOGY_TERM_SOURCE_ID
 and me.pan_id=io.output_pan_id
 and io.input_pan_id=ob.pan_id

                  ]]>
            </sql>
        </sqlQuery>    
>templateTextEnd<


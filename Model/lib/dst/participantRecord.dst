[templateStart] 
name=participantRecord
anchorFile=ClinEpiModel/Model/lib/wdk/model/records/participantRecord.xml
prop=datasetName
prop=studyAbbreviation
prop=participantRecordOverview
prop=participantRecordAttributesListFull
prop=participantGraphAttributes
prop=participantGraphAttributeNames
prop=participantSourceIdsExcludedFromParticipantAttributes
prop=observationSourceIdsForParticipantsObservationsTable
prop=observationSourceIdsToOrderParticipantsObservationsTable
prop=tblPrefix
prop=presenterId
prop=includeProjects
prop=!hasObservationRecord
prop=hasObservationRecord
prop=participantRecordSamplesTable
prop=participantRecordMicrosTable
 
>templateTextStart<
    <recordClassSet name="${presenterId}ParticipantRecordClasses" includeProjects="${includeProjects}">

      <recordClass name="${presenterId}ParticipantRecordClass" 
                   urlName="${presenterId}_participant" 
                   shortDisplayName="Participant"
                   displayName="${studyAbbreviation} Participant"
                   iconName="fa fa-male"
                   allRecordsQueryRef="${presenterId}ParticipantAttributes.AllParticipants"
                   includeProjects="${includeProjects}"> 

            <!-- primary key definition -->
            <primaryKey aliasQueryRef="${presenterId}ParticipantAttributes.ParticipantAlias">
                <columnRef>source_id</columnRef>
                <columnRef>project_id</columnRef>
            </primaryKey>

            <idAttribute name="primary_key" displayName="Participant Id">
                <text>
                    <![CDATA[
                      $$source_id$$
                    ]]>
                </text>                
            </idAttribute>

           ${participantRecordAttributesListFull}        
           
           ${participantGraphAttributes}


<!--
            <textAttribute name="demo_plot_heightweight_compact" displayName="Weight for Height Z - DEMO Graph"  truncateTo="100000">
              <text>
              <![CDATA
                  <img src="/cgi-bin/dataPlotter.pl?project_id=$$project_id$$&id=$$source_id$$&type=Participant&fmt=png&template=1&contXAxis=EUPATH_0000579&yAxis=EUPATH_0011919&eventStart=EUPATH_0000579&eventDur=EUPATH_0000665&status=EUPATH_0000704&thumb=1"/>
                    ]]>
              </text>
            </textAttribute>

            <textAttribute name="demo_plot_weightage_compact" displayName="Weight for Age Z - DEMO Graph"  truncateTo="100000">
              <text>
              <![CDATA[
                  <img src="/cgi-bin/dataPlotter.pl?project_id=$$project_id$$&id=$$source_id$$&type=Participant&fmt=png&template=1&contXAxis=EUPATH_0000579&yAxis=EUPATH_0000733&eventStart=EUPATH_0000579&eventDur=EUPATH_0000665&status=EUPATH_0000704&thumb=1"/>
                    ]]>
              </text>
            </textAttribute>

            <textAttribute name="demo_plot_heightage_compact" displayName="Height for Age Z - DEMO Graph"  truncateTo="100000">
              <text>
              <![CDATA[
                  <img src="/cgi-bin/dataPlotter.pl?project_id=$$project_id$$&id=$$source_id$$&type=Participant&fmt=png&template=1&contXAxis=EUPATH_0000579&yAxis=EUPATH_0000689&eventStart=EUPATH_0000579&eventDur=EUPATH_0000665&status=EUPATH_0000704&thumb=1"/>
                    ]]>
              </text>
            </textAttribute>

BEGIN MALED
-->
      <!-- =============================================================== -->
      <!--  Step Analysis Plugins -->
      <!-- =============================================================== -->


      <stepAnalysisRef name="clinepi-event-dist"> 
        <property name="datasetTblPrefix">${tblPrefix}</property>
        <property name="datasetName">${datasetName}</property>
      </stepAnalysisRef>
      <stepAnalysisRef name="clinepi-cont-table">    
        <property name="datasetTblPrefix">${tblPrefix}</property>
        <property name="datasetName">${datasetName}</property>
      </stepAnalysisRef>
      <stepAnalysisRef name="clinepi-summaries">
        <property name="datasetTblPrefix">${tblPrefix}</property>
        <property name="datasetName">${datasetName}</property>
      </stepAnalysisRef>
      <!-- =============================================================== -->
      <!--   Reporters -->  
      <!-- =============================================================== -->


      <reporter name="attributesTabular" displayName="Tab delimited (Excel) - choose Participant columns to make a custom table" scopes="results"
                implementation="org.gusdb.wdk.model.report.reporter.AttributesTabularReporter">
        <property name="page_size">500</property>
      </reporter>


      <reporter name="tableTabular" displayName="Tab delimited (Excel) - Households and Observations and Samples" scopes="results"
                implementation="org.gusdb.wdk.model.report.reporter.TableTabularReporter">
              <!-- huge page size to force no paging  -->
              <property name="page_size">1000000</property>
          </reporter>

      <reporter name="fullRecord" displayName="%%fullReporterDisplayName%%" scopes=""
                implementation="org.gusdb.wdk.model.report.reporter.FullRecordReporter" />


      <!-- =================================================================== -->
      <!--  Text Attributes  ++++++++-->
      <!-- =================================================================== -->

<!--
 <textAttribute name="record_overview" displayName="Overview">

             <text>
                  <![CDATA[
                  Participant <i>$$source_id$$</i> from Household <a href="@WEBAPP_BASE_URL@/record/${presenterId}_household/$$EUPATH_0000094$$/@PROJECT_ID@">$$EUPATH_0000094$$</a> in subcounty $$EUPATH_0000054$$.
                  ]]>
             </text>
          </textAttribute>
-->

 <textAttribute name="record_overview" displayName="Overview">

             <text>
                  <![CDATA[
           ${participantRecordOverview}
                  ]]>
             </text>
          </textAttribute>




         <attributeQueryRef ref="${presenterId}ParticipantAttributes.ParticipantAttributes" attributeMetaQueryRef="${presenterId}ParticipantAttributes.ParticipantAttributesMeta"/>

         <attributeQueryRef ref="${presenterId}ParticipantAttributes.HouseholdAttributes" attributeMetaQueryRef="${presenterId}ParticipantAttributes.HouseholdAttributesMeta"/>


         <attributeQueryRef ref="${presenterId}ParticipantAttributes.ObservationAttributes" attributeMetaQueryRef="${presenterId}ParticipantAttributes.ObservationAttributesMeta"/>


        <table name="Characteristics"
               displayName="Participant Characteristics"
               queryRef="${presenterId}ParticipantTables.Characteristics">
            <columnAttribute name="source_id"  inReportMaker="false" internal="true"/>
            <columnAttribute name="project_id"  inReportMaker="false" internal="true"/>
            <columnAttribute name="display_name" displayName="Value"/>
            <columnAttribute name="parent_source_id" displayName="Category"/>
            <columnAttribute name="unique_id" displayName="unique_id"/>
            <columnAttribute name="is_leaf" displayName="is_leaf"/>
            <propertyList name="tableIsTree"><value>true</value></propertyList>
        </table>


	
         <table name="Observations"
                 displayName="Observations"
                 queryRef="${presenterId}ParticipantTables.Observations"
                 attributeMetaQueryRef="${presenterId}ParticipantTables.ObservationsColumnAttributes">
            <columnAttribute name="source_id" internal="true"/>
            <columnAttribute name="project_id" internal="true"/>
            <columnAttribute name="link" internal="true"/>

            <columnAttribute name="name" internal="${hasObservationRecord}"/>
            <linkAttribute name="db_link" displayName="Date of Observation" internal="${!hasObservationRecord}" inReportMaker="false">
                 <displayText>
                    <![CDATA[
                    $$name$$
                    ]]>
                 </displayText>
                 <url>$$link$$</url>
            </linkAttribute>
          </table>



         <table name="ObservationsDownload"
                 displayName="Observations"
                 queryRef="${presenterId}ParticipantTables.ObservationsDownload"
                 attributeMetaQueryRef="${presenterId}ParticipantTables.ObservationsDownloadColumnAttributes">
            <columnAttribute name="source_id" internal="true" inReportMaker="false"/>
            <columnAttribute name="project_id" internal="true" inReportMaker="false"/>
            <columnAttribute name="name" internal="true" inReportMaker="false"/>
	    <columnAttribute name="Observation_Id"/>
          </table>

	  

	  
           <table name="SamplesDownload"
                 displayName="Samples"
                 queryRef="${presenterId}ParticipantTables.SamplesDownload"
                 attributeMetaQueryRef="${presenterId}ParticipantTables.SamplesDownloadColumnAttributes">
            <columnAttribute name="source_id" internal="true" inReportMaker="false"/>
            <columnAttribute name="project_id" internal="true" inReportMaker="false"/>
	    <columnAttribute name="Observation_Id"/>
            <columnAttribute name="Sample_Id"/>
          </table>


           <table name="HouseholdsDownload"
                 displayName="Households"
                 queryRef="${presenterId}ParticipantTables.HouseholdsDownload"
                 attributeMetaQueryRef="${presenterId}ParticipantTables.HouseholdsDownloadColumnAttributes">
            <columnAttribute name="source_id" internal="true" inReportMaker="false"/>
            <columnAttribute name="project_id" internal="true" inReportMaker="false"/>
            <columnAttribute name="Household_Id"/>
          </table>


     ${participantRecordSamplesTable}
     ${participantRecordMicrosTable}

    </recordClass>
    </recordClassSet>
>templateTextEnd<



[templateStart] 
name=participantRecordSamplesTable
anchorFile=ClinEpiModel/Model/lib/wdk/model/records/participantRecord.xml
prop=presenterId
prop=hasObservationRecord
prop=!hasObservationRecord
>templateTextStart<
        <table name="Samples"
               displayName="Samples Collected From Participant"
               queryRef="\${presenterId}ParticipantTables.Samples"
               attributeMetaQueryRef="\${presenterId}ParticipantTables.SamplesColumnAttributes">
            <columnAttribute name="source_id" inReportMaker="false" internal="true"/>
            <columnAttribute name="project_id" inReportMaker="false" internal="true"/>
            <columnAttribute name="link" internal="true"/>

            <columnAttribute name="obsName" internal="\${hasObservationRecord}"/>
            <linkAttribute name="obsLink" displayName="Observation" internal="\${!hasObservationRecord}" inReportMaker="false">
                 <displayText>
                    <![CDATA[
                    \$\$obsName\$\$
                    ]]>
                 </displayText>
                 <url>\$\$link\$\$</url>
            </linkAttribute>

            <columnAttribute name="sample_id" displayName="Sample ID"/>

        </table>
>templateTextEnd<


[templateStart] 
name=participantRecordMicrosTable
anchorFile=ClinEpiModel/Model/lib/wdk/model/records/participantRecord.xml
prop=presenterId

>templateTextStart<
        <table name="Micros"
               displayName="Stool Microbiology Test"
               queryRef="\${presenterId}ParticipantTables.Micros">
	       <columnAttribute name="source_id" inReportMaker="false" internal="true"/>
               <columnAttribute name="project_id" inReportMaker="false" internal="true"/>
	       <columnAttribute name="sample_id" displayName="Sample ID"/>
	       <columnAttribute name="observation_type" displayName="Observation Type"/>
	       <columnAttribute name="property" displayName="Stool Microbiology Test"/>
	       <columnAttribute name="string_value" displayName="Result"/>
	       <columnAttribute name="property_source_id" inReportMaker="false" internal="true"/>

        </table>
>templateTextEnd<


[templateStart] 
name=participantRecordAttributeQueries
anchorFile=ClinEpiModel/Model/lib/wdk/model/records/participantRecord.xml
prop=datasetName
prop=participantRecordAttributesListFull
prop=participantGraphAttributes
prop=participantGraphAttributeNames
prop=participantSourceIdsExcludedFromParticipantAttributes
prop=participantSourceIdsExcludedFromParticipantAttributesQuote
prop=observationSourceIdsForParticipantsObservationsTable
prop=observationSourceIdsToOrderParticipantsObservationsTable
prop=tblPrefix
prop=presenterId
prop=includeProjects
>templateTextStart<
    <querySet name="${presenterId}ParticipantAttributes" queryType="attribute" doNotTest="true" includeProjects="${includeProjects}"
              isCacheable='false'
              >

      <testRowCountSql>
select count(*) from apidbtuning.${tblPrefix}Participants
       </testRowCountSql>



       <sqlQuery name="AllParticipants" doNotTest="true">
         <column name="source_id"/>
         <column name="project_id"/>
         <sql>
             SELECT name as source_id, '@PROJECT_ID@' AS project_id FROM apidbtuning.${tblPrefix}Participants
         </sql>
       </sqlQuery>

       <sqlQuery name="ParticipantAlias" doNotTest="true">
         <column name="source_id"/>
         <column name="project_id"/>
         <column name="old_source_id"/>
         <column name="old_project_id"/>
         <sql>
             SELECT name as source_id, '@PROJECT_ID@' AS project_id, name as old_source_id, '@PROJECT_ID@' AS old_project_id FROM apidbtuning.${tblPrefix}Participants
         </sql>
       </sqlQuery>


     <sqlQuery name="ParticipantAttributes" attributeMetaQueryRef="${presenterId}ParticipantAttributes.ParticipantAttributesMeta">
         <column name="source_id"/>
         <column name="project_id"/>

          <sql>
            <![CDATA[
            select pa.name as source_id, '@PROJECT_ID@' as project_id, pa.*
                     from apidbtuning.${tblPrefix}Participants pa
            ]]>
          </sql>
        </sqlQuery>


<sqlQuery name="ParticipantAttributesMeta" isCacheable="false">
          <column name="name" />
          <column name="display_name" />
          <column name="help" />
          <column name="reporter_name" />
          <column name="reporter_display" />
          <column name="reporter_description" />
          <column name="reporter_implementation" />
          <column name="reporter_properties" />

           <sql>
            <![CDATA[
select * from (
       select distinct CASE when meta.display_name  = t1.display_name and meta.name=t1.ontology_term_source_id then 
       	      concat(concat(t1.parent_ontology_term_name, ' >> '),meta.display_name) ELSE meta.display_name end as display_name, 
	      meta.name, meta.help,
                   decode(meta.type, 'string', 'histogram', 'number', 'histogram', null) as reporter_name,
                   decode(meta.type, 'string', 'Histogram', 'number', 'Histogram', null) as reporter_display,
                   decode(meta.type, 'string', 'Display a histogram of the values', 'number', 'Display a histogram of the values',null) as reporter_description,
                   decode(meta.type, 'string', 'org.gusdb.wdk.model.report.reporter.HistogramAttributeReporter', 'number','org.gusdb.wdk.model.report.reporter.HistogramAttributeReporter', null) as reporter_implementation,
                    null as reporter_properties
from (
            select distinct o.display_name as display_name, o.ontology_term_source_id as name, o.description as help, o.type
            from ALL_TAB_COLUMNS c, all_synonyms s, ApidbTuning.${tblPrefix}Ontology o
                where s.synonym_name = upper('${tblPrefix}PARTICIPANTS')
                and c.owner = 'APIDBTUNING'
                and c.table_name = s.table_name
                and upper(o.ontology_term_source_id) = c.column_name) meta, 
		
		(select * from (
                    with Par as ( select distinct display_name, count(display_name) as ct from(
                                        select distinct o.display_name as display_name, o.ontology_term_source_id as name
                                        from ALL_TAB_COLUMNS c, all_synonyms s, ApidbTuning.${tblPrefix}Ontology o
                                            where s.synonym_name = upper('${tblPrefix}PARTICIPANTS')
                                            and c.owner = 'APIDBTUNING'
                                            and c.table_name = s.table_name
                                            and upper(o.ontology_term_source_id) = c.column_name
                                                )
                                    group by display_name
                                )
                        select distinct o.display_name, o.ONTOLOGY_TERM_source_id, o.parent_ontology_term_name 
			from ApidbTuning.${tblPrefix}Ontology o, Par 
			where o.display_name  = Par.display_name and Par.ct > 1
                          and o.ONTOLOGY_TERM_source_id in (select distinct o.ontology_term_source_id
                              				 from ALL_TAB_COLUMNS c, all_synonyms s, ApidbTuning.${tblPrefix}Ontology o
                            				   where s.synonym_name = upper('${tblPrefix}PARTICIPANTS')
                            				   and c.owner = 'APIDBTUNING'
                            				   and c.table_name = s.table_name
                            				   and upper(o.ontology_term_source_id) = c.column_name)))t1

    where meta.display_name  = t1.display_name
) 

where display_name like '%>>%'


UNION

select distinct meta.display_name, meta.name, meta.help,
                   decode(meta.type, 'string', 'histogram', 'number', 'histogram', null) as reporter_name,
                   decode(meta.type, 'string', 'Histogram', 'number', 'Histogram', null) as reporter_display,
                   decode(meta.type, 'string', 'Display a histogram of the values', 'number', 'Display a histogram of the values',null) as reporter_description,
                   decode(meta.type, 'string', 'org.gusdb.wdk.model.report.reporter.HistogramAttributeReporter', 'number','org.gusdb.wdk.model.report.reporter.HistogramAttributeReporter', null) as reporter_implementation,
                            null as reporter_properties
from (
            select distinct o.display_name as display_name, o.ontology_term_source_id as name, o.description as help, o.type
            from ALL_TAB_COLUMNS c, all_synonyms s, ApidbTuning.${tblPrefix}Ontology o
                where s.synonym_name = upper('${tblPrefix}PARTICIPANTS')
                and c.owner = 'APIDBTUNING'
                and c.table_name = s.table_name
                and upper(o.ontology_term_source_id) = c.column_name

    ) meta, (select * from (
                    with Par as ( select distinct display_name, count(display_name) as ct from(
                                        select distinct o.display_name as display_name, o.ontology_term_source_id as name
                                        from ALL_TAB_COLUMNS c, all_synonyms s, ApidbTuning.${tblPrefix}Ontology o
                                            where s.synonym_name = upper('${tblPrefix}PARTICIPANTS')
                                            and c.owner = 'APIDBTUNING'
                                            and c.table_name = s.table_name
                                            and upper(o.ontology_term_source_id) = c.column_name
                                                )
                                    group by display_name
                                )
                        select distinct o.display_name, o.ONTOLOGY_TERM_source_id, o.parent_ontology_term_name from ApidbTuning.${tblPrefix}Ontology o, Par where o.display_name  = Par.display_name and Par.ct>1
                            and o.ONTOLOGY_TERM_source_id in (select distinct o.ontology_term_source_id
                        from ALL_TAB_COLUMNS c, all_synonyms s, ApidbTuning.${tblPrefix}Ontology o
                            where s.synonym_name = upper('${tblPrefix}PARTICIPANTS')
                            and c.owner = 'APIDBTUNING'
                            and c.table_name = s.table_name
                            and upper(o.ontology_term_source_id) = c.column_name)))t1

    where meta.display_name  != t1.display_name
    
    
 UNION
 
 select distinct meta.display_name
 , meta.name, meta.help,
                   decode(meta.type, 'string', 'histogram', 'number', 'histogram', null) as reporter_name,
                   decode(meta.type, 'string', 'Histogram', 'number', 'Histogram', null) as reporter_display,
                   decode(meta.type, 'string', 'Display a histogram of the values', 'number', 'Display a histogram of the values',null) as reporter_description,
                   decode(meta.type, 'string', 'org.gusdb.wdk.model.report.reporter.HistogramAttributeReporter', 'number','org.gusdb.wdk.model.report.reporter.HistogramAttributeReporter', null) as reporter_implementation,
                            null as reporter_properties
from (
            select distinct o.display_name as display_name, o.ontology_term_source_id as name, o.description as help, o.type
            from ALL_TAB_COLUMNS c, all_synonyms s, ApidbTuning.${tblPrefix}Ontology o
                where s.synonym_name = upper('${tblPrefix}PARTICIPANTS')
                and c.owner = 'APIDBTUNING'
                and c.table_name = s.table_name
                and upper(o.ontology_term_source_id) = c.column_name
 
    ) meta
    
    where (select count(distinct display_name) from 
    (select distinct o.display_name as display_name, o.ontology_term_source_id as name
            from ALL_TAB_COLUMNS c, all_synonyms s, ApidbTuning.${tblPrefix}Ontology o
                where s.synonym_name = upper('${tblPrefix}PARTICIPANTS')
                and c.owner = 'APIDBTUNING'
                and c.table_name = s.table_name
                and upper(o.ontology_term_source_id) = c.column_name)) = 

		(select count(*) from (select distinct o.display_name as display_name, o.ontology_term_source_id as name
            from ALL_TAB_COLUMNS c, all_synonyms s, ApidbTuning.${tblPrefix}Ontology o
                where s.synonym_name = upper('${tblPrefix}PARTICIPANTS')
                and c.owner = 'APIDBTUNING'
                and c.table_name = s.table_name
                and upper(o.ontology_term_source_id) = c.column_name))
  ]]>

                </sql>
         </sqlQuery>



<sqlQuery name="HouseholdAttributes" attributeMetaQueryRef="${presenterId}ParticipantAttributes.HouseholdAttributesMeta">
         <column name="source_id"/>
         <column name="project_id"/>
         <column name="household_id"/>
          <sql>
            <![CDATA[

        select hh.name as household_id, pa.name as source_id, '@PROJECT_ID@' as project_id, hh.*
        from apidbtuning.${tblPrefix}Households hh,
             APIDBTUNING.${tblPrefix}PARTICIPANTS pa,
             apidbtuning.${tblPrefix}PANIO io

    where  pa.PAN_ID = io.OUTPUT_PAN_ID
              and io.INPUT_PAN_ID = hh.PAN_ID

            ]]>
            </sql>

        </sqlQuery>



<sqlQuery name="HouseholdAttributesMeta" isCacheable="false">
           <column name="name" />
           <column name="display_name" />
	   <column name="help" />
           <column name="reporter_name" />
           <column name="reporter_display" />
           <column name="reporter_description" />
           <column name="reporter_implementation" />
           <column name="reporter_properties" />

           <sql>
            <![CDATA[

with hasHHObser as(
     select count(*) as ct
     from apidbtuning.${tblPrefix}PANIO
     where input_pan_type_source_id = 'PCO_0000024'
     and output_pan_type_source_id = 'PCO_0000024'
     )

select meta.display_name, meta.name, meta.help,
                   decode(meta.type, 'string', 'histogram', 'number', 'histogram', null) as reporter_name,
                   decode(meta.type, 'string', 'Histogram', 'number', 'Histogram', null) as reporter_display,
                   decode(meta.type, 'string', 'Display a histogram of the values', 'number', 'Display a histogram of the values',null) as reporter_description,
                   decode(meta.type, 'string', 'org.gusdb.wdk.model.report.reporter.HistogramAttributeReporter', 'number','org.gusdb.wdk.model.report.reporter.HistogramAttributeReporter', null) as reporter_implementation,
                    null as reporter_properties
from (

     select distinct o.display_name as display_name, o.ontology_term_source_id as name,o.description as help, o.type
            from ALL_TAB_COLUMNS c, all_synonyms s, ApidbTuning.${tblPrefix}Ontology o
            where s.synonym_name = upper('${tblPrefix}Households')
            and c.owner = 'APIDBTUNING'
            and c.table_name = s.table_name
            and upper(o.ontology_term_source_id) = c.column_name
	    and (o.ontology_term_source_id = 'OBI_0001627' or o.ontology_term_source_id = 'EUPATH_0000407' or o.ontology_term_source_id = 'EUPATH_0000054') 
	    and (select ct from hasHHObser) >0

     UNION
 
      select distinct o.display_name as display_name, o.ontology_term_source_id as name,o.description as help, o.type
            from ALL_TAB_COLUMNS c, all_synonyms s, ApidbTuning.${tblPrefix}Ontology o
            where s.synonym_name = upper('${tblPrefix}Households')
            and c.owner = 'APIDBTUNING'
            and c.table_name = s.table_name
            and upper(o.ontology_term_source_id) = c.column_name
	    and (select ct from hasHHObser) = 0

     UNION
     
     select 'Household ID' as display_name, 'household_id' as name, '' as help, '' as type from dual
     	    where (select count(*) from apidbtuning.${tblPrefix}Households) >0
      )meta
            ]]>
              </sql>

           </sqlQuery>



<sqlQuery name="ObservationAttributes" attributeMetaQueryRef="${presenterId}ParticipantAttributes.ObservationAttributesMeta">
         <column name="source_id"/>
         <column name="project_id"/>
          <sql>
            <![CDATA[

select pa.name as source_id, '@PROJECT_ID@' as project_id, ob.*
        from APIDBTUNING.${tblPrefix}Participants pa,
             APIDBTUNING.${tblPrefix}Observations ob ,
             apidbtuning.${tblPrefix}PANIO io

    where  ob.PAN_ID = io.OUTPUT_PAN_ID
              and io.INPUT_PAN_ID = pa.PAN_ID

            ]]>
            </sql>

        </sqlQuery>



<sqlQuery name="ObservationAttributesMeta" isCacheable="false">
           <column name="name" />
           <column name="display_name" />
	   <column name="help" />
           <column name="reporter_name" />
           <column name="reporter_display" />
           <column name="reporter_description" />
           <column name="reporter_implementation" />
           <column name="reporter_properties" />

           <sql>
            <![CDATA[

select * from (
select distinct CASE when meta.display_name  = t1.display_name and meta.name=t1.ontology_term_source_id then
concat(concat(t1.parent_ontology_term_name, ' >> '),meta.display_name) ELSE meta.display_name end as display_name,
meta.name,meta.help,
                   decode(meta.type, 'string', 'histogram', 'number', 'histogram', null) as reporter_name,
                   decode(meta.type, 'string', 'Histogram', 'number', 'Histogram', null) as reporter_display,
                   decode(meta.type, 'string', 'Display a histogram of the values', 'number', 'Display a histogram of the values',null) as reporter_description,
                   decode(meta.type, 'string', 'org.gusdb.wdk.model.report.reporter.HistogramAttributeReporter', 'number','org.gusdb.wdk.model.report.reporter.HistogramAttributeReporter', null) as reporter_implementation,
                            null as reporter_properties
from (
    select distinct o.display_name as display_name, o.ontology_term_source_id as name,o.description as help, o.type
    from ALL_TAB_COLUMNS c, all_synonyms s, ApidbTuning.${tblPrefix}Ontology o
    where s.synonym_name = upper('${tblPrefix}Observations')
            and c.owner = 'APIDBTUNING'
            and c.table_name = s.table_name
            and upper(o.ontology_term_source_id) = c.column_name
            and (select count(ct) from
                    (select count(observationID)  as ct
                    from (
                            select ob.pan_id as ObservationID, pa.pan_id as ParticipantID
                            from  apidbtuning.${tblPrefix}Participants pa, apidbtuning.${tblPrefix}Observations ob, apidbtuning.${tblPrefix}PANIO io
                                where ob.pan_id = io.output_pan_id
                                and io.input_pan_id  = pa.pan_id)
                                group by participantID
                    )where ct=1) =
                    (select count(*) from (select ob.pan_id as ObservationID, pa.pan_id as ParticipantID
                    from  apidbtuning.${tblPrefix}Participants pa, apidbtuning.${tblPrefix}Observations ob, apidbtuning.${tblPrefix}PANIO io
                        where ob.pan_id = io.output_pan_id
                        and io.input_pan_id  = pa.pan_id))
    )meta ,
    (select * from (
                    with OB as ( select distinct display_name, count(display_name) as ct from(
                                        select distinct o.display_name as display_name, o.ontology_term_source_id as name
                                        from ALL_TAB_COLUMNS c, all_synonyms s, ApidbTuning.${tblPrefix}Ontology o
                                            where s.synonym_name = upper('${tblPrefix}Observations')
                                            and c.owner = 'APIDBTUNING'
                                            and c.table_name = s.table_name
                                            and upper(o.ontology_term_source_id) = c.column_name
                                                )
                                    group by display_name
                                )
                        select distinct o.display_name, o.ONTOLOGY_TERM_source_id, o.parent_ontology_term_name from ApidbTuning.${tblPrefix}Ontology o, OB where o.display_name  = OB.display_name and OB.ct > 1
                            and o.ONTOLOGY_TERM_source_id in (select distinct o.ontology_term_source_id
                        from ALL_TAB_COLUMNS c, all_synonyms s, ApidbTuning.${tblPrefix}Ontology o
                            where s.synonym_name = upper('${tblPrefix}Observations')
                            and c.owner = 'APIDBTUNING'
                            and c.table_name = s.table_name
                            and upper(o.ontology_term_source_id) = c.column_name)))t1
    where meta.display_name  = t1.display_name
 ) where display_name like '%>>%'
 
UNION

select distinct meta.display_name, meta.name, meta.help, 
                    decode(meta.type, 'string', 'histogram', 'number', 'histogram', null) as reporter_name,
                    decode(meta.type, 'string', 'Histogram', 'number', 'Histogram', null) as reporter_display,
                    decode(meta.type, 'string', 'Display a histogram of the values', 'number', 'Display a histogram of the values',null) as reporter_description,
                    decode(meta.type, 'string', 'org.gusdb.wdk.model.report.reporter.HistogramAttributeReporter', 'number','org.gusdb.wdk.model.report.reporter.HistogramAttributeReporter', null) as reporter_implementation,
                            null as reporter_properties
    from (
    select distinct o.display_name as display_name, o.ontology_term_source_id as name,o.description as help, o.type
    from ALL_TAB_COLUMNS c, all_synonyms s, ApidbTuning.${tblPrefix}Ontology o
    where s.synonym_name = upper('${tblPrefix}Observations')
            and c.owner = 'APIDBTUNING'
            and c.table_name = s.table_name
            and upper(o.ontology_term_source_id) = c.column_name
            and (select count(ct) from
                    (select count(observationID)  as ct
                    from (
                            select ob.pan_id as ObservationID, pa.pan_id as ParticipantID
                            from  apidbtuning.${tblPrefix}Participants pa, apidbtuning.${tblPrefix}Observations ob, apidbtuning.${tblPrefix}PANIO io
                                where ob.pan_id = io.output_pan_id
                                and io.input_pan_id  = pa.pan_id)
                                group by participantID
                    )where ct=1) =
                    (select count(*) from (select ob.pan_id as ObservationID, pa.pan_id as ParticipantID
                    from  apidbtuning.${tblPrefix}Participants pa, apidbtuning.${tblPrefix}Observations ob, apidbtuning.${tblPrefix}PANIO io
                        where ob.pan_id = io.output_pan_id
                        and io.input_pan_id  = pa.pan_id))
    )meta 

 where meta.display_name not in (select tt.display_name from ( (select * from (
                    with OB as ( select distinct display_name, count(display_name) as ct_num from(
                                        select distinct o.display_name as display_name, o.ontology_term_source_id as name
                                        from ALL_TAB_COLUMNS c, all_synonyms s, ApidbTuning.${tblPrefix}Ontology o
                                            where s.synonym_name = upper('${tblPrefix}Observations')
                                            and c.owner = 'APIDBTUNING'
                                            and c.table_name = s.table_name
                                            and upper(o.ontology_term_source_id) = c.column_name
                                                )
                                    group by display_name
                                )
                        select distinct o.display_name, o.ONTOLOGY_TERM_source_id, o.parent_ontology_term_name from ApidbTuning.${tblPrefix}Ontology o, OB where o.display_name  = OB.display_name and OB.ct_num > 1
                            and o.ONTOLOGY_TERM_source_id in (select distinct o.ontology_term_source_id
                        from ALL_TAB_COLUMNS c, all_synonyms s, ApidbTuning.${tblPrefix}Ontology o
                            where s.synonym_name = upper('${tblPrefix}Observations')
                            and c.owner = 'APIDBTUNING'
                            and c.table_name = s.table_name
                            and upper(o.ontology_term_source_id) = c.column_name)))tt))



      ]]>
              </sql>

           </sqlQuery>




      </querySet>   
>templateTextEnd<






[templateStart] 
name=participantRecordTableQueries
anchorFile=ClinEpiModel/Model/lib/wdk/model/records/participantRecord.xml
prop=datasetName
prop=participantRecordAttributesListFull
prop=participantGraphAttributes
prop=participantGraphAttributeNames
prop=participantSourceIdsExcludedFromParticipantAttributes
prop=observationSourceIdsForParticipantsObservationsTable
prop=observationSourceIdsForParticipantsObservationsTableSubquery
prop=observationSourceIdsToOrderParticipantsObservationsTable
prop=tblPrefix
prop=presenterId
prop=includeProjects
prop=participantRecordSamplesTableQuery
prop=participantRecordSamplesMetaTableQuery
prop=participantRecordMicrosTableQuery

>templateTextStart<
    <querySet name="${presenterId}ParticipantTables" queryType="table" includeProjects="${includeProjects}" 
              isCacheable='false'>

      <sqlQuery name="Characteristics"  isCacheable='false'>
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="display_name"/>
            <column name="parent_source_id"/>
            <column name="unique_id"/>
            <column name="is_leaf"/>
<!--         <sqlParamValue name="datasetName"><![CDATA[ISASimple_ICEMR_PRISM_surveillance_RSRC]]></sqlParamValue> -->
         <sqlParamValue name="datasetName"><![CDATA[${datasetName}]]></sqlParamValue>
            <sql>
            <![CDATA[
SELECT pan_name  AS source_id,
  '@PROJECT_ID@' AS project_id,
  nvl(property_source_id, 'root')      AS parent_source_id,
  pan_id ||'_'||property_id ||'_'||string_value as unique_id,
  string_value   AS display_name,
  1 as is_leaf
FROM apidbtuning.${tblPrefix}metadata
WHERE dataset_name = '&&datasetName&&'
AND string_value is not null
AND category       in ('Child','Participant')
UNION
SELECT pa.name                AS source_id,
  '@PROJECT_ID@'              AS project_id,
  nvl(o.PARENT_ONTOLOGY_TERM_SOURCE_ID, 'root') AS parent_source_id,
  o.ONTOLOGY_TERM_SOURCE_ID AS unique_id,
  ontology_term_name          AS display_name,
  0 as is_leaf
FROM apidbtuning.${tblPrefix}Ontology o,
  apidbtuning.${tblPrefix}Participants pa
WHERE o.dataset_name = '&&datasetName&&'
            ]]>
            </sql>
        </sqlQuery>

      <sqlQuery name="ObservationsColumnAttributes"  isCacheable='false'>
          <column name="name" />
          <column name="display_name" />

          <sql>
            <![CDATA[
                     select pt.property_source_id as name
                          , pt.property as display_name
                     from apidbtuning.${tblPrefix}PropertyType pt, ${observationSourceIdsForParticipantsObservationsTableSubquery} ids
                     where pt.property_source_id = ids.property_source_id
                     order by ids.order_num
            ]]>
          </sql>
        </sqlQuery>


        ${participantRecordSamplesMetaTableQuery}



      <sqlQuery name="ObservationsDownloadColumnAttributes"  isCacheable='false'>
          <column name="name" />
          <column name="display_name" />

          <sql>
            <![CDATA[
            select distinct o.display_name as display_name, o.ontology_term_source_id as name
            from ALL_TAB_COLUMNS c, all_synonyms s, ApidbTuning.${tblPrefix}Ontology o
            where s.synonym_name = upper('${tblPrefix}OBSERVATIONS')
            and c.owner = 'APIDBTUNING'
            and c.table_name = s.table_name
            and upper(o.ontology_term_source_id) = c.column_name
            ]]>
          </sql>
        </sqlQuery>



 <sqlQuery name="ObservationsDownload"  isCacheable='false' attributeMetaQueryRef="${presenterId}ParticipantTables.ObservationsDownloadColumnAttributes">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="name"/>
	    <column name="Observation_Id"/>
            <sql>
            <![CDATA[

select pa.name as source_id,'@PROJECT_ID@' as project_id, cv.name as Observation_Id, cv.*
        from apidbtuning.${tblPrefix}Observations cv
              , apidbtuning.${tblPrefix}Participants pa
              , apidbtuning.${tblPrefix}PANIO io
              where cv.PAN_ID = io.OUTPUT_PAN_ID
              and io.INPUT_PAN_ID = pa.PAN_ID

union

select t1.source_id, t1.project_id, t1.Observation_Id, t2.* from
       (select pa.name as source_id,'@PROJECT_ID@' as project_id, cv.name as Observation_Id, cv.pan_id
        from apidbtuning.${tblPrefix}Observations cv
              , apidbtuning.${tblPrefix}Participants pa
              , apidbtuning.${tblPrefix}PANIO io
               where cv.PAN_ID = io.OUTPUT_PAN_ID
              and io.INPUT_PAN_ID = pa.PAN_ID) t1,

         (select cv.* from apidbtuning.${tblPrefix}Observations cv
              , apidbtuning.${tblPrefix}PANIO io
              where io.INPUT_PAN_TYPE_SOURCE_ID='EUPATH_0000738' and io.OUTPUT_PAN_TYPE_SOURCE_ID='EUPATH_0000738'
              and cv.PAN_ID=io.OUTPUT_PAN_ID) t2,

              apidbtuning.${tblPrefix}PANIO t3

              where t2.pan_id = t3.output_pan_id
              and t3.input_pan_id = t1.pan_id


            ]]>

            </sql>
        </sqlQuery>



<sqlQuery name="SamplesDownloadColumnAttributes"  isCacheable='false'>
          <column name="name" />
          <column name="display_name" />

          <sql>
            <![CDATA[
            select distinct o.display_name as display_name, o.ontology_term_source_id as name
            from ALL_TAB_COLUMNS c, all_synonyms s, ApidbTuning.${tblPrefix}Ontology o
            where s.synonym_name = upper('${tblPrefix}SAMPLES')
            and c.owner = 'APIDBTUNING'
            and c.table_name = s.table_name
            and upper(o.ontology_term_source_id) = c.column_name
            ]]>
          </sql>
        </sqlQuery>


 <sqlQuery name="SamplesDownload"  isCacheable='false' attributeMetaQueryRef="${presenterId}ParticipantTables.SamplesDownloadColumnAttributes">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="observation_source_id"/>
	    <column name="Observation_Id"/>
            <column name="Sample_Id"/>
            <sql>
            <![CDATA[

SELECT pa.name as source_id,
        '@PROJECT_ID@' as project_id, cv.name as observation_source_id, cv.name as Observation_Id, sp.name as Sample_Id, sp.*
FROM 	apidbtuning.${tblPrefix}Participants pa
              ,apidbtuning.${tblPrefix}Observations cv
               ,apidbtuning.${tblPrefix}Samples sp
              , apidbtuning.${tblPrefix}PANIO io
              ,apidbtuning.${tblPrefix}PANIO io2
              where sp.PAN_ID = io.OUTPUT_PAN_ID
              and io.INPUT_PAN_ID = cv.PAN_ID
              and cv.PAN_ID = io2.OUTPUT_PAN_ID
              and io2.INPUT_PAN_ID = pa.PAN_ID
        
            ]]>
            </sql>
        </sqlQuery>





<sqlQuery name="HouseholdsDownloadColumnAttributes"  isCacheable='false'>
          <column name="name" />
          <column name="display_name" />

          <sql>
            <![CDATA[
            select distinct o.display_name as display_name, o.ontology_term_source_id as name
            from ALL_TAB_COLUMNS c, all_synonyms s, ApidbTuning.${tblPrefix}Ontology o
            where s.synonym_name = upper('${tblPrefix}Households')
            and c.owner = 'APIDBTUNING'
            and c.table_name = s.table_name
            and upper(o.ontology_term_source_id) = c.column_name
            ]]>
          </sql>
        </sqlQuery>


 <sqlQuery name="HouseholdsDownload"  isCacheable='false' attributeMetaQueryRef="${presenterId}ParticipantTables.HouseholdsDownloadColumnAttributes">
 	    <column name="source_id"/>
            <column name="project_id"/>
            <column name="Household_Id"/>
            <sql>
            <![CDATA[

 with HHob as(
        select *
        from apidbtuning.${tblPrefix}PANIO
        where input_pan_type_source_id = 'PCO_0000024'
        and output_pan_type_source_id = 'PCO_0000024'
    )
select pa.name as source_id, '@PROJECT_ID@' as project_id, hh.name as Household_Id, hh.*
    from apidbtuning.${tblPrefix}Households hh, HHob, apidbtuning.${tblPrefix}Participants pa, apidbtuning.${tblPrefix}Panio io1
   where  hh.pan_id =  HHob.output_pan_id
   
   and pa.pan_id = io1.output_pan_id
   and io1.input_pan_id  = HHob.input_pan_id
   
 union 
 
   select pa.name as source_id,  '@PROJECT_ID@' as project_id, hh.name as Household_Id, hh.*                  
         from apidbtuning.${tblPrefix}Households hh, HHob,  apidbtuning.${tblPrefix}Participants pa,  apidbtuning.${tblPrefix}Panio io2
        where HHob.input_pan_id = hh.pan_id
        and pa.PAN_ID = io2.OUTPUT_PAN_ID
        and io2.INPUT_PAN_ID = hh.PAN_ID

            ]]>
            </sql>
        </sqlQuery>




      <sqlQuery name="Observations"  isCacheable='false' attributeMetaQueryRef="${presenterId}ParticipantTables.ObservationsColumnAttributes">
            <column name="source_id"/>
            <column name="project_id"/>


           <column name="link"/>
           <column name="name"/>

         <sqlParamValue name="observationSourceIds"><![CDATA[${observationSourceIdsForParticipantsObservationsTable}]]></sqlParamValue>
         <sqlParamValue name="orderBy"><![CDATA[${observationSourceIdsToOrderParticipantsObservationsTable}]]></sqlParamValue>
<!--
MALED
         <sqlParamValue name="observationSourceIds"><![CDATA[EUPATH_0000579,BFO_0000015]]></sqlParamValue>
         <sqlParamValue name="orderBy"><![CDATA[EUPATH_0000579]]></sqlParamValue>


ICEMR

         <sqlParamValue name="observationSourceIds"><![CDATA[EUPATH_0000091,EUPATH_0000113,EUPATH_0000311,EUPATH_0000338,EUPATH_0000100,EUPATH_0000110,EUPATH_0000092,EUPATH_0000040]]></sqlParamValue>
         <sqlParamValue name="orderBy"><![CDATA[EUPATH_0000091]]></sqlParamValue>
-->
            <sql>
            <![CDATA[
select pa.name as source_id,
        '@PROJECT_ID@' as project_id, &&observationSourceIds&&, 
                   '@WEBAPP_BASE_URL@/record/${presenterId}_observation/'||cv.name||'/@PROJECT_ID@' as link, cv.name
              from apidbtuning.${tblPrefix}Observations cv
              , apidbtuning.${tblPrefix}Participants pa
              , apidbtuning.${tblPrefix}PANIO io
              where cv.PAN_ID = io.OUTPUT_PAN_ID
              and io.INPUT_PAN_ID = pa.PAN_ID
              order by &&orderBy&&
            ]]>
            </sql>
        </sqlQuery>

       ${participantRecordSamplesTableQuery}


       ${participantRecordMicrosTableQuery}

  </querySet>

>templateTextEnd<


[templateStart] 
name=participantRecordSamplesTableQuery
anchorFile=ClinEpiModel/Model/lib/wdk/model/records/participantRecord.xml
prop=sampleSourceIdsForParticipantsSamplesTable
prop=sampleSourceIdsToOrderParticipantsSamplesTable
prop=tblPrefix
prop=presenterId
>templateTextStart<
      <sqlQuery name="Samples"  isCacheable='false'  attributeMetaQueryRef="\${presenterId}ParticipantTables.SamplesColumnAttributes">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="link"/>
            <column name="obsName"/>
            <column name="sample_id"/>


         <sqlParamValue name="sampleSourceIds"><![CDATA[\${sampleSourceIdsForParticipantsSamplesTable}]]></sqlParamValue>
         <sqlParamValue name="orderBy"><![CDATA[\${sampleSourceIdsToOrderParticipantsSamplesTable}]]></sqlParamValue>

            <sql>
                 <![CDATA[
select pa.name as source_id,
        '@PROJECT_ID@' as project_id, &&sampleSourceIds&&, 
                   '@WEBAPP_BASE_URL@/record/\${presenterId}_observation/'||cv.name||'/@PROJECT_ID@' as link, sa.name as sample_id, cv.name as obsName
              from (select pan_id, name from apidbtuning.\${tblPrefix}Observations) cv
              , apidbtuning.\${tblPrefix}Participants pa
              , apidbtuning.\${tblPrefix}samples sa
              , apidbtuning.\${tblPrefix}PANIO io
              , apidbtuning.\${tblPrefix}PANIO io2
              where cv.PAN_ID = io.OUTPUT_PAN_ID
              and io.INPUT_PAN_ID = pa.PAN_ID
              and sa.pan_id = io2.output_pan_id
              and io2.INPUT_PAN_ID = cv.PAN_ID
              order by &&orderBy&&
                  ]]>
            </sql>
        </sqlQuery>    
>templateTextEnd<

[templateStart] 
name=participantRecordSamplesMetaTableQuery
anchorFile=ClinEpiModel/Model/lib/wdk/model/records/participantRecord.xml
prop=sampleSourceIdsForParticipantsSamplesTableSubquery
prop=tblPrefix
>templateTextStart<
      <sqlQuery name="SamplesColumnAttributes"  isCacheable='false'>
          <column name="name" />
          <column name="display_name" />

          <sql>
            <![CDATA[
                     select pt.property_source_id as name
                          , pt.property as display_name
                     from apidbtuning.\${tblPrefix}PropertyType pt, \${sampleSourceIdsForParticipantsSamplesTableSubquery} ids
                     where pt.property_source_id = ids.property_source_id
                     order by ids.order_num
            ]]>
          </sql>
        </sqlQuery>
>templateTextEnd<





[templateStart] 
name=participantRecordMicrosTableQuery
anchorFile=ClinEpiModel/Model/lib/wdk/model/records/participantRecord.xml
prop=tblPrefix
prop=presenterId
prop=microSourceIdsForParticipantsMicrosQuote

>templateTextStart<
      <sqlQuery name="Micros"  isCacheable='false'>
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="sample_id"/>
	    <column name="observation_type"/>
            <column name="property"/>
            <column name="string_value"/>
	    <column name="property_source_id"/>

	    
	   <sqlParamValue name="microSourceIds"><![CDATA[\${microSourceIdsForParticipantsMicrosQuote}]]></sqlParamValue>

            <sql>
                 <![CDATA[

with microtest as(
    SELECT ONTOLOGY_TERM_NAME,ONTOLOGY_TERM_SOURCE_ID, CONNECT_BY_ISLEAF  as "isleaf"                                    
               FROM  APIDBTUNING.\${tblPrefix}ONTOLOGY                                                                                              WHERE CONNECT_BY_ISLEAF=1                                                                                                           start with ONTOLOGY_TERM_SOURCE_ID in (&&microSourceIds&&)                                                                         connect by prior ONTOLOGY_TERM_SOURCE_ID=PARENT_ONTOLOGY_TERM_SOURCE_ID  
)
SELECT pa.name as source_id, me.pan_name as sample_id, ob.BFO_0000015 as observation_type, me.property, me.string_value, me.property_source_id,'@PROJECT_ID@' as project_id                                                                                                
FROM ( SELECT pan_id, name,BFO_0000015 FROM apidbtuning.\${tblPrefix}Observations) ob, apidbtuning.\${tblPrefix}Participants pa 
, apidbtuning.\${tblPrefix}PANIO io                                                                                                , apidbtuning.\${tblPrefix}metadata me                                                                                             , apidbtuning.\${tblPrefix}PANIO io2
, microtest
 WHERE ob.PAN_ID = io.OUTPUT_PAN_ID                                                                                                   AND io.INPUT_PAN_ID = pa.PAN_ID                                                                                                    AND me.pan_id = io2.output_pan_id                                                                                                  AND io2.INPUT_PAN_ID = ob.PAN_ID 
              AND me.property_source_id=microtest.ONTOLOGY_TERM_SOURCE_ID
                  ]]>
            </sql>
        </sqlQuery>    
>templateTextEnd<




